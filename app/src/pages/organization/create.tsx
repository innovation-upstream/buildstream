import React, { useState } from 'react'
import { useWeb3React } from '@web3-react/core'
import getContract from 'utils/getContract'
import OrgContract from 'contracts/Org.json'
import { ethers } from 'ethers'
import Head from 'next/head'
import { useRouter } from 'next/router'

type orgDataType = {
  name: string
  description: string
  rewardMultiplier: number
  rewardToken: string
  reviewers: string[]
  approvers: string[]
  signers: string[]
  requiredConfirmations: number
  requiredTaskApprovals: number
}

const CreateOrganisation: React.FC = () => {
  const router = useRouter()
  const { account, library } = useWeb3React()
  const [processing, setProcessing] = useState(false)
  const [orgData, setOrgData] = useState<orgDataType>({
    name: '',
    description: '',
    rewardMultiplier: 1,
    rewardToken: ethers.constants.AddressZero,
    reviewers: [],
    approvers: [],
    signers: [],
    requiredConfirmations: 1,
    requiredTaskApprovals: 1,
  })
  const [status, setStatus] = useState<any>({ text: '', error: false })

  const handleChange = (ev: any) => {
    const targetName: string = ev.target.name
    let targetValue: string | number = ev.target.value

    if (
      targetName === 'rewardMultiplier' ||
      targetName === 'requiredConfirmations' ||
      targetName === 'requiredTaskApprovals'
    ) {
      if (targetValue) {
        targetValue = Number(targetValue)
      }
    }

    if (
      targetName === 'reviewers' ||
      targetName === 'approvers' ||
      targetName === 'signers'
    ) {
      let prevData = [...orgData[targetName]]
      prevData[ev.target.id] = ev.target.value
      setOrgData((prev: any) => ({ ...prev, [targetName]: [...prevData] }))
      return
    }
    setOrgData((prev: any) => ({ ...prev, [targetName]: targetValue }))
  }

  const addReviewer = () => {
    let preReviewers = [...orgData.reviewers]
    preReviewers.push('')
    setOrgData((prev: any) => ({ ...prev, reviewers: preReviewers }))
  }
  const addApprovers = () => {
    let prevData = [...orgData.approvers]
    prevData.push('')
    setOrgData((prev: any) => ({ ...prev, approvers: prevData }))
  }
  const addSigners = () => {
    let prevData = [...orgData.signers]
    prevData.push('')
    setOrgData((prev: any) => ({ ...prev, signers: prevData }))
  }

  const createOrg: any = async () => {
    const name = orgData.name
    const description = orgData.description
    const rewardMultiplier = orgData.rewardMultiplier

    if (!name || !description || !rewardMultiplier) {
      setStatus({ text: 'Invalid Input. Complete all Fields', error: true })
      return
    }

    if (!account) {
      setStatus({ text: 'Wallet Not Connected', error: true })
      return
    }
    try {
      setProcessing(true)
      await getContract(OrgContract.address, OrgContract.abi as any)
        .connect(library.getSigner())
        .createOrg(
          name,
          description,
          rewardMultiplier,
          orgData.rewardToken,
          orgData.reviewers,
          [account],
          [account],
          orgData.requiredConfirmations,
          orgData.requiredTaskApprovals,
          { gasLimit: 40000 }
        )
      router.push('/organization')
    } catch (error) {
      setProcessing(false)
      setStatus({ text: 'Error! Not created', error: true })
      console.error(error)
    }
  }

  return (
    <div>
      <Head>
        <title>Buildstream: Create Organization</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <section className='text-gray-600 body-font relative'>
        <div className='container px-5 py-24 mx-auto'>
          <div className='flex flex-col text-center w-full mb-12'>
            <h1 className='sm:text-3xl text-2xl font-medium title-font mb-4 text-gray-900'>
              Create Organisation
            </h1>
            <p
              className={`lg:w-2/3 mx-auto leading-relaxed text-base ${
                status.error ? 'text-red-500' : 'text-green-500'
              }`}
            >
              {status.text}
            </p>
          </div>
          <div className='lg:w-1/2 md:w-2/3 mx-auto'>
            <div className='flex flex-wrap -m-2'>
              <div className='p-2 w-1/2'>
                <div className='relative'>
                  <label
                    htmlFor='name'
                    className='leading-7 text-sm text-gray-600'
                  >
                    Name
                  </label>
                  <input
                    type='text'
                    id='name'
                    name='name'
                    value={orgData.name}
                    onChange={handleChange}
                    className='w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out'
                  />
                </div>
              </div>
              <div className='p-2 w-1/2'>
                <div className='relative'>
                  <label
                    htmlFor='rewardMultiplier'
                    className='leading-7 text-sm text-gray-600'
                  >
                    Reward Multiplier
                  </label>
                  <input
                    type='number'
                    id='rewardMultiplier'
                    name='rewardMultiplier'
                    value={orgData.rewardMultiplier}
                    onChange={handleChange}
                    className='w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out'
                  />
                </div>
              </div>
              <div className='p-2 w-1/2'>
                <div className='relative'>
                  <label
                    htmlFor='email'
                    className='leading-7 text-sm text-gray-600'
                  >
                    Required Confirmations
                  </label>
                  <input
                    type='number'
                    id='requiredConfirmations'
                    name='requiredConfirmations'
                    value={orgData.requiredConfirmations}
                    onChange={handleChange}
                    className='w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out'
                  />
                </div>
              </div>
              <div className='p-2 w-1/2'>
                <div className='relative'>
                  <label
                    htmlFor='requiredTaskApprovals'
                    className='leading-7 text-sm text-gray-600'
                  >
                    Required Task Approvals
                  </label>
                  <input
                    type='number'
                    id='requiredTaskApprovals'
                    name='requiredTaskApprovals'
                    value={orgData.requiredTaskApprovals}
                    onChange={handleChange}
                    className='w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out'
                  />
                </div>
              </div>
              <div className='p-2 w-full'>
                <div className='relative'>
                  <label
                    htmlFor='rewardToken'
                    className='leading-7 text-sm text-gray-600'
                  >
                    Reward Tokens
                  </label>
                  <input
                    type='text'
                    id='rewardToken'
                    name='rewardToken'
                    value={orgData.rewardToken}
                    onChange={handleChange}
                    className='w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out'
                  />
                </div>
              </div>
              <div className='accordion w-full pt-3 pb-3' id='accordionExample'>
                <div className='relative accordion-item bg-white border border-gray-200'>
                  <h2
                    className='accordion-header mb-0 p-3 mx-2'
                    id='headingOne'
                  >
                    Add Reviewers
                  </h2>
                  <div
                    id='collapseOne'
                    className='accordion-collapse collapse show'
                    aria-labelledby='headingOne'
                    data-bs-parent='#accordionExample'
                  >
                    <div className='accordion-body px-5'>
                      {orgData.reviewers.map((input, ind) => {
                        return (
                          <div key={ind} className='p-0 mb-4'>
                            <div className='relative'>
                              <input
                                id={`${ind}`}
                                name='reviewers'
                                value={input}
                                onChange={handleChange}
                                className='w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out'
                              />
                            </div>
                          </div>
                        )
                      })}
                    </div>
                    <button
                      className='flex my-3 mx-5 text-white bg-slate-600 border-0 py-2 px-8 focus:outline-none hover:bg-slate-800 rounded text-lg'
                      type='button'
                      data-bs-toggle='collapse'
                      data-bs-target='#collapseOne'
                      aria-expanded='true'
                      aria-controls='collapseOne'
                      onClick={addReviewer}
                    >
                      +
                    </button>
                  </div>
                </div>
                <div className='accordion-item bg-white border border-gray-200'>
                  <h2
                    className='accordion-header mb-0 mx-5 py-3'
                    id='headingTwo'
                  >
                    Add Approvers
                  </h2>
                  <div
                    id='collapseTwo'
                    className='accordion-collapse collapse show'
                    aria-labelledby='headingTwo'
                    data-bs-parent='#accordionExample'
                  >
                    <div className='accordion-body px-5'>
                      {orgData.approvers.map((input, ind) => {
                        return (
                          <div key={ind} className='p-0 mb-4'>
                            <div className='relative'>
                              <input
                                id={`${ind}`}
                                name='approvers'
                                value={input}
                                onChange={handleChange}
                                className='w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out'
                              />
                            </div>
                          </div>
                        )
                      })}
                    </div>
                    <button
                      className='my-3 mx-5 text-white bg-slate-600 border-0 py-2 px-8 focus:outline-none hover:bg-slate-800 rounded text-lg'
                      type='button'
                      data-bs-toggle='collapse'
                      data-bs-target='#collapseTwo'
                      aria-expanded='true'
                      aria-controls='collapseTwo'
                      onClick={addApprovers}
                    >
                      +
                    </button>
                  </div>
                </div>
                <div className='accordion-item bg-white border border-gray-200'>
                  <h2
                    className='accordion-header mb-0 mx-5 py-3'
                    id='headingThree'
                  >
                    Add Signers
                  </h2>
                  <div
                    id='collapseThree'
                    className='accordion-collapse collapse'
                    aria-labelledby='headingThree'
                    data-bs-parent='#accordionExample'
                  >
                    <div className='accordion-body px-5'>
                      {orgData.signers.map((input, ind) => {
                        return (
                          <div key={ind} className='p-0 mb-4'>
                            <div className='relative'>
                              <input
                                id={`${ind}`}
                                name='signers'
                                value={input}
                                onChange={handleChange}
                                className='w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out'
                              />
                            </div>
                          </div>
                        )
                      })}
                    </div>
                  </div>
                  <button
                    className='flex my-3 mx-5 text-white bg-slate-600 mt-4 border-0 py-2 px-8 focus:outline-none hover:bg-slate-800 rounded text-lg'
                    type='button'
                    data-bs-toggle='collapse'
                    data-bs-target='#collapseThree'
                    aria-expanded='true'
                    aria-controls='collapseThree'
                    onClick={addSigners}
                  >
                    +
                  </button>
                </div>
              </div>
              <div className='p-2 w-full'>
                <div className='relative'>
                  <label
                    htmlFor='message'
                    className='leading-7 text-sm text-gray-600'
                  >
                    Description
                  </label>
                  <textarea
                    id='description'
                    name='description'
                    value={orgData.description}
                    onChange={handleChange}
                    className='w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 h-32 text-base outline-none text-gray-700 py-1 px-3 resize-none leading-6 transition-colors duration-200 ease-in-out'
                  ></textarea>
                </div>
              </div>
              <div className='p-2 w-full'>
                <button
                  onClick={createOrg}
                  className='flex mx-auto text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg'
                >
                  {processing ? 'Processing...' : 'Create'}
                </button>
              </div>
            </div>
          </div>
        </div>
      </section>
    </div>
  )
}

export default CreateOrganisation
