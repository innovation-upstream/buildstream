import {
  Action,
  Deposit,
  GetActionsDocument,
  GetDepositsDocument,
  GetOrganizationDocument,
  GetTasksDocument,
  GetTaskSnapshotsDocument,
  Organization,
  Task,
  TaskSnapshot
} from 'graphclient'
import client from 'graphclient/client'
import { useGetOrganizationQuery, usePolling } from 'hooks'
import type {
  GetServerSideProps,
  GetServerSidePropsContext,
  NextPage
} from 'next'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import { wrapper } from 'state/store'
import { Converter } from 'utils/converter'
import Treasury from 'components/Organization/Dashboard/Treasury'
import TaskStatistics from 'components/Organization/Dashboard/TaskStatistics'
import TaskView from 'components/Organization/Dashboard/TaskView'
import ActivityView from 'components/Organization/Dashboard/ActivityView'
import { serverSideTranslations } from 'next-i18next/serverSideTranslations'
import { useTranslation } from 'next-i18next'
import TabControl, { Tab } from 'components/Organization/Settings/TabControl'
import MainInformation from 'components/Organization/Settings/MainInformation'
import TreasuryHistory from 'components/Organization/Settings/TreasuryHistory'
import Wallet from 'components/Organization/Settings/Wallet'
import Reward from 'components/Organization/Settings/Reward'
import Administrators from 'components/Organization/Settings/Administrators'

export const getServerSideProps: GetServerSideProps =
  wrapper.getServerSideProps(
    (store) => async (context: GetServerSidePropsContext) => {
      const orgId = context.params?.id?.[0] || '0'
      const locale = context.locale ?? ''
      const { data } = await client.query({
        query: GetOrganizationDocument,
        variables: {
          id: orgId
        }
      })

      const { data: actions } = await client.query({
        query: GetActionsDocument,
        variables: {
          orderBy: 'completedAt',
          orderDirection: 'desc',
          where: {
            orgId: orgId as any,
            actionType: 0
          }
        }
      })

      const { data: deposits } = await client.query({
        query: GetDepositsDocument,
        variables: {
          orderBy: 'completedAt',
          orderDirection: 'desc',
          where: {
            orgId: orgId as any
          }
        }
      })

      return {
        props: {
          org: data?.organization,
          withdrawals: actions.actions,
          deposits: deposits.deposits,
          ...(await serverSideTranslations(locale, [
            'common',
            'organization',
            'header',
            'tasks'
          ]))
        }
      }
    }
  )

interface PageProps {
  org: Organization
  withdrawals: Action[]
  deposits: Deposit[]
}

const OrganizationPage: NextPage<PageProps> = ({
  org,
  withdrawals,
  deposits
}) => {
  const { t } = useTranslation('organization')
  const [organization, setOrganization] = useState(
    Converter.OrganizationFromQuery(org)
  )
  const { data, startPolling, stopPolling } = useGetOrganizationQuery({
    variables: {
      id: org.id
    }
  })
  usePolling(startPolling, stopPolling)

  useEffect(() => {
    if (data?.organization) {
      setOrganization(Converter.OrganizationFromQuery(data.organization))
    }
  }, [data])

  const [activeTab, setActiveTab] = useState(0)

  return (
    <div className='layout-container pb-20'>
      <Head>
        <title>Buildstream: Organizations</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div className='grid-layout py-24'>
        <div className='hidden 2xl:block col-span-4 md:col-span-3 lg:col-span-4 2xl:col-span-3'>
          <div className='z-10 md:sticky top-[140px] md:max-h-[calc(100vh-170px)] overflow-auto rounded-2xl scrollbar-hide'>
            {activeTab === Tab.TREASURY && (
              <Wallet organization={organization} />
            )}
          </div>
        </div>
        <div className='col-span-4 md:col-span-5 lg:col-span-8 2xl:col-span-6'>
          <h2 className='text-[40px] font-bold mb-8'>
            {t('organization_settings')}
          </h2>
          <TabControl
            onChange={(t) => setActiveTab(t)}
            tabs={{
              [Tab.INFORMATION]: (
                <MainInformation organization={organization} />
              ),
              [Tab.TREASURY]: (
                <TreasuryHistory
                  organization={organization}
                  withdrawalHistory={withdrawals?.map((a) =>
                    Converter.ActionFromQuery(a)
                  )}
                  depositHistory={deposits?.map((d) =>
                    Converter.DepositFromQuery(d)
                  )}
                />
              ),
              [Tab.ADMINISTRATORS]: (
                <Administrators organization={organization} />
              ),
              [Tab.TASK_MANAGER_API]: null
            }}
          />
        </div>
        <div className='col-span-4 md:col-span-3 lg:col-span-4 2xl:col-span-3'>
          <div className='md:sticky top-[140px] md:max-h-[calc(100vh-170px)] overflow-auto rounded-2xl scrollbar-hide'>
            {activeTab === Tab.TREASURY && (
              <>
                <div className='2xl:hidden mb-4'>
                  <Wallet organization={organization} />
                </div>
                <Reward organization={organization} />
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}

export default OrganizationPage
