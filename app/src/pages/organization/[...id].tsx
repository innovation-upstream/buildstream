import Deposit from 'components/Deposit/Deposit'
import { ethers } from 'ethers'
import { fetchOrganization } from 'hooks/organization/functions'
import { Organization } from 'hooks/organization/types'
import { fetchTaskCountByOrg, fetchTasksByOrg } from 'hooks/task/functions'
import type {
  GetServerSideProps,
  GetServerSidePropsContext,
  NextPage
} from 'next'
import Head from 'next/head'
import { wrapper } from 'state/store'
import { updateCount as updateTaskCount, updateTasks } from 'state/task/slice'

export const getServerSideProps: GetServerSideProps =
  wrapper.getServerSideProps(
    (store) => async (context: GetServerSidePropsContext) => {
      const orgId = parseInt(context.params?.id?.[0] || '0')
      const org = await fetchOrganization(orgId)

      const taskCount = await fetchTaskCountByOrg(orgId, true, true)
      const tasks = await fetchTasksByOrg(orgId, 0, taskCount)

      store.dispatch(updateTaskCount(tasks.length))
      store.dispatch(
        updateTasks({
          data: tasks,
          page: { from: 0, to: tasks.length }
        })
      )

      return {
        props: {
          org: {
            ...org,
            rewardMultiplier: org.rewardMultiplier.toNumber()
          }
        }
      }
    }
  )

interface PageProps {
  org: Organization
}

const OrganizationPage: NextPage<PageProps> = ({ org }) => {
  return (
    <div className='container justify-between mx-auto flex flex-wrap p-5 flex-col md:flex-row'>
      <Head>
        <title>Buildstream: Organizations</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div className='w-full h-full px-5 py-10 bg-white md:basis-4/12 rounded-sm shadow'>
        <h1 className='sm:text-4xl text-3xl font-medium title-font mb-2 text-gray-900'>
          {org?.name}
        </h1>
        <p className='lg:w-2/3 leading-relaxed text-base text-gray-500'>
          {org?.description}
        </p>
        <p className='text-lg mt-10 break-all'>
          Approvers:{' '}
          <span className='text-sm text-gray-500'>
            {org?.approvers.toString()}
          </span>
        </p>
        <p className='text-lg mt-3 break-all'>
          Reviewers:{' '}
          <span className='text-sm text-gray-500'>
            {org?.reviewers.toString()}
          </span>
        </p>
        <p className='text-lg mt-3 break-all'>
          Signers:{' '}
          <span className='text-sm text-gray-500'>
            {org?.signers.toString()}
          </span>
        </p>
        <p className='text-lg mt-3 break-all'>
          Required task approvals:{' '}
          <span className='text-sm text-gray-500'>
            {org?.requiredTaskApprovals}
          </span>
        </p>
        <p className='text-lg mt-3 break-all'>
          Required confirmations:{' '}
          <span className='text-sm text-gray-500'>
            {org?.requiredConfirmations}
          </span>
        </p>
        <p className='text-lg mt-3 break-all'>
          Reward multiplier:{' '}
          <span className='text-sm text-gray-500'>
            {org?.rewardMultiplier.toString()}
          </span>
        </p>
        <p className='text-lg mt-3 break-all'>
          Reward token:{' '}
          <span className='text-sm text-gray-500'>
            {org?.rewardToken === ethers.constants.AddressZero
              ? null
              : org?.rewardToken}
          </span>
        </p>
      </div>
      <div className='w-full h-full mt-10 md:basis-6/12 bg-gray-100 rounded-lg p-8'>
        <Deposit org={org} />
      </div>
    </div>
  )
}

export default OrganizationPage
