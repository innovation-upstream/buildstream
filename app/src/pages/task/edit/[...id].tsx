import React, { useState } from 'react'
import type { GetServerSideProps, NextPage } from 'next'
import { wrapper } from 'state/store'
import { editTask } from 'hooks/task/functions'
import { Task } from 'hooks/task/types'
import Head from 'next/head'
import { ComplexityScoreMap } from 'hooks/task/types'
import { useWeb3React } from '@web3-react/core'
import { useRouter } from 'next/router'
import client from 'graphclient/client'
import { GetTaskDocument } from '../../../../.graphclient'

interface PageProps {
  task: Task
}

export const getServerSideProps: GetServerSideProps =
  wrapper.getServerSideProps((store) => async (context) => {
    const taskId = context.params?.id?.[0] || '0'
    const { data } = await client.query({
      query: GetTaskDocument,
      variables: {
        id: taskId
      }
    })

    return {
      props: {
        task: data.task
      }
    }
  })

const EditTask: React.FC<PageProps> = ({ task }) => {
  const [taskData, setTaskData] = useState(task)
  const [errorMsg, setErrorMsg] = useState<string>()
  const [status, setStatus] = useState({ text: '', error: false })
  const taskComplexities = Object.entries(ComplexityScoreMap)
  const [processing, setProcessing] = useState(false)
  const { account, library } = useWeb3React()
  const router = useRouter()

  const handleChange = (ev: any) => {
    const targetName = ev.target.name
    let targetValue: string | number = ev.target.value

    if (ev.target.type === 'number') {
      if (targetValue) {
        targetValue = Number(targetValue)
      }
    }
    setTaskData((prev) => ({ ...prev, [targetName]: targetValue }))
  }

  const editCurrentTask = async () => {
    if (!account) {
      setStatus({ text: 'Wallet Not Connected', error: true })
      return
    }
    setProcessing(true)
    try {
      const response = await editTask(
        taskData.id,
        taskData.complexityScore,
        taskData.reputationLevel,
        taskData.taskDuration,
        library.getSigner()
      )
      setProcessing(false)
      if (response) router.push(`/task`)
    } catch (e) {
      setProcessing(false)
      console.error(e)
    }
  }

  return (
    <div>
      <Head>
        <title>Buildstream: Edit Task</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <section className='text-gray-600 body-font relative'>
        <div className='container px-5 py-24 mx-auto'>
          <div className='flex flex-col text-center w-full mb-12'>
            <h1 className='sm:text-3xl text-2xl font-medium title-font mb-4 text-gray-900'>
              Edit Task
            </h1>
            <p
              className={`lg:w-2/3 mx-auto leading-relaxed text-base ${
                status.error ? 'text-red-500' : 'text-green-500'
              }`}
            >
              {status.text}
            </p>
          </div>
          <div className='lg:w-1/2 md:w-2/3 mx-auto'>
            <div className='flex flex-wrap -m-2'>
              <div className='p-2 w-full'>
                <div className='relative'>
                  <label
                    htmlFor='complexityScore'
                    className='leading-7 text-sm text-gray-600'
                  >
                    Complexity Score
                  </label>
                  <select
                    id='complexityScore'
                    value={taskData?.complexityScore}
                    onChange={handleChange}
                    name='complexityScore'
                    className='w-full bg-gray-100 py-3 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out'
                  >
                    {taskComplexities.map(([key, value]) => {
                      return (
                        <option key={key} value={key}>
                          {value.toLocaleUpperCase()}
                        </option>
                      )
                    })}
                  </select>
                </div>
              </div>
              <div className='p-2 w-full'>
                <div className='relative'>
                  <label
                    htmlFor='reputationLevel'
                    className='leading-7 text-sm text-gray-600'
                  >
                    Reputational Level
                  </label>
                  <input
                    type='number'
                    id='reputationLevel'
                    name='reputationLevel'
                    value={taskData.reputationLevel}
                    onChange={handleChange}
                    className='w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out'
                  />
                </div>
              </div>
              <div className='p-2 w-full'>
                <div className='relative'>
                  <label
                    htmlFor='taskDuration'
                    className='leading-7 text-sm text-gray-600'
                  >
                    Task Duration
                  </label>
                  <input
                    type='number'
                    id='taskDuration'
                    name='taskDuration'
                    value={taskData.taskDuration}
                    onChange={handleChange}
                    className='w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out'
                  />
                </div>
              </div>
              <div className='p-2 w-full'>
                <button
                  type='button'
                  onClick={editCurrentTask}
                  className='flex mx-auto text-white bg-indigo-500 border-0 py-2 px-8 focus:outline-none hover:bg-indigo-600 rounded text-lg'
                >
                  {processing ? 'Processing...' : 'Edit'}
                </button>
              </div>
            </div>
          </div>
        </div>
      </section>
    </div>
  )
}

export default EditTask
