import Filter from 'components/Task/TaskListPage/Filter'
import { TaskFilterProvider } from 'components/Task/TaskListPage/FilterContext'
import ProfileCard from 'components/Task/TaskListPage/ProfileCard'
import Search from 'components/Task/TaskListPage/Search'
import TaskView from 'components/Task/TaskListPage/TaskView'
import UserTasks from 'components/Task/TaskListPage/UserTasks'
import client from 'graphclient/client'
import { TaskStatus } from 'hooks/task/types'
import { useUserStat } from 'hooks/userstat'
import { fetchClickupTask } from 'integrations/clickup/api'
import type {
  GetServerSideProps,
  GetServerSidePropsContext,
  NextPage
} from 'next'
import { serverSideTranslations } from 'next-i18next/serverSideTranslations'
import Head from 'next/head'
import { wrapper } from 'state/store'
import { Converter } from 'utils/converter'
import { GetTasksDocument, Task } from '../../.graphclient'

export const getServerSideProps: GetServerSideProps =
  wrapper.getServerSideProps(
    (store) => async (context: GetServerSidePropsContext) => {
      const { data } = await client.query({
        query: GetTasksDocument,
        variables: {
          orderBy: 'taskId',
          orderDirection: 'desc',
          where: {
            status: TaskStatus.OPEN
          }
        }
      })
      const locale = context.locale ?? ''

      const tasksWithClickupData = await Promise.all(
        data.tasks.map(async (t) => {
          if (!t.externalId) {
            return t
          }
          const clickupTask = await fetchClickupTask(
            t.externalId as string,
            t.orgId.id
          )
          return {
            ...t,
            title: clickupTask?.name || t.title,
            description: clickupTask?.description || t.description
          }
        })
      )

      return {
        props: {
          taskList: tasksWithClickupData,
          ...(await serverSideTranslations(locale, [
            'common',
            'tasks',
            'header',
            'organization'
          ]))
        }
      }
    }
  )

const TasksPage: NextPage<{ taskList: Task[] }> = ({ taskList }) => {
  const stats = useUserStat()

  return (
    <div className='layout-container pb-20'>
      <Head>
        <title>Buildstream: Tasks</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <TaskFilterProvider>
        <div className='grid-layout py-10 md:py-24'>
          <div className='col-span-4 md:col-span-8 lg:col-span-12 lg:hidden'>
            <Search showControls />
          </div>
          <div className='col-span-4 md:col-span-3 lg:col-span-4 2xl:col-span-3 order-2 2xl:order-1'>
            <div className='rounded-2xl'>
              <div className='mb-4 hidden lg:block 2xl:hidden'>
                <Filter expand />
              </div>
              <ProfileCard />
              <div className='mt-4'>
                <UserTasks />
              </div>
            </div>
          </div>
          <div className='col-span-4 md:col-span-5 lg:col-span-8 2xl:col-span-6 order-1 2xl:order-2'>
            <TaskView tasks={taskList.map((t) => Converter.TaskFromQuery(t))} />
          </div>
          <div className='hidden 2xl:block col-span-4 md:col-span-3 lg:col-span-4 2xl:col-span-3 order-3'>
            <div className='rounded-2xl'>
              <Filter expand />
            </div>
          </div>
        </div>
      </TaskFilterProvider>
    </div>
  )
}

export default TasksPage
