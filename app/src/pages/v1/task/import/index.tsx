import Head from 'next/head'
import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import { GetServerSideProps, NextPage } from 'next'
import { wrapper } from 'state/store'
import { getCookie, setCookies, removeCookies } from 'cookies-next'
import Spinner from 'components/Spinner/Spinner'

const TOKEN_KEY = 'clickupToken'
const CLIENT_CODE = 'clickupClientCode'

export const getServerSideProps: GetServerSideProps =
  wrapper.getServerSideProps((store) => async (context) => {
    const code = context.query?.code?.toString() || '0'

    return {
      props: {
        client_code: code
      }
    }
  })

interface Tasks {
  id: string
  name: string
  description: string
  start_date: string
  due_date: string
  url: string
}

const ImportTask: NextPage<{ client_code: string }> = ({ client_code }) => {
  const router = useRouter()
  const [status, setStatus] = useState({ text: '', error: false })
  const [taskProcess, setTaskProcess] = useState(false)
  const [spaceProcess, setSpaceProcess] = useState(false)
  const [spaces, setSpaces] = useState<any[]>([])
  const [tasks, setTasks] = useState<Tasks[]>([])

  const serverUrl = process.env.NEXT_PUBLIC_CLICKUP_SERVER_URL

  useEffect(() => {
    if (
      getCookie(TOKEN_KEY) !== undefined &&
      getCookie(CLIENT_CODE) === client_code
    ) {
      getSpaces()
      return
    }
    getToken()
  }, [])

  const client_id = process.env.NEXT_PUBLIC_CLICKUP_CLIENT_ID
  const client_secret = process.env.NEXT_PUBLIC_CLICKUP_CLIENT_SECRET

  const getToken = async () => {
    try {
      const res = await fetch(`${serverUrl}/get_token`, {
        method: 'POST',
        body: JSON.stringify({
          client_id: client_id,
          client_secret: client_secret,
          code: client_code
        }),
        headers: new Headers({ 'Content-Type': 'application/json' })
      })
      const data = await res.json()
      if (data.access_token) {
        setCookies(TOKEN_KEY, data.access_token)
        setCookies(CLIENT_CODE, client_code)
      }
      getSpaces()
    } catch (e) {
      console.log('ERRORRR===', e)
    }
  }

  const getSpaces = async () => {
    setSpaceProcess(true)
    try {
      const res = await fetch(`${serverUrl}/spaces`, {
        method: 'POST',
        body: JSON.stringify({
          token: getCookie(TOKEN_KEY)
        }),
        headers: new Headers({ 'Content-Type': 'application/json' })
      })
      const data = await res.json()
      setSpaceProcess(false)
      setSpaces(data.spaces)
    } catch (err) {
      setSpaceProcess(false)
      console.error(err)
    }
  }

  const handleChange = (ev: any) => {
    let targetValue: number = parseInt(ev.target.value)
    getTasks(targetValue)
  }

  const getTasks = async (space_id: number) => {
    setTaskProcess(true)
    try {
      const resp = await fetch(`${serverUrl}/tasks`, {
        method: 'POST',
        body: JSON.stringify({
          space_id: space_id,
          token: getCookie(TOKEN_KEY)
        }),
        headers: new Headers({ 'Content-Type': 'application/json' })
      })
      const data = await resp.json()
      setTasks(data)
      setTaskProcess(false)

    } catch (err) {
      setTaskProcess(false)
      console.error(err)
    }
  }

  return (
    <div>
      <Head>
        <title>Buildstream: Import Task</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <section className='text-gray-600 body-font relative'>
        <div className='container px-5 pt-24 mx-auto'>
          <div className='flex flex-col text-center w-full mb-12'>
            <h1 className='sm:text-3xl text-2xl font-medium title-font mb-4 text-gray-900'>
              Import Task
            </h1>
            <p
              className={`lg:w-2/3 mx-auto leading-relaxed text-base ${
                status.error ? 'text-red-500' : 'text-green-500'
              }`}
            >
              {status.text}
            </p>
          </div>
        </div>
        <div className='container justify-between mx-auto flex flex-wrap p-5 flex-col md:flex-row'>
          <div className='w-full md:basis-3/12 h-full top-20 sticky bg-white md:basis-4/12 rounded-sm'>
            <h2 className='text-bold font-bold pb-3'>Spaces</h2>
            <ul className='grid gap-6 w-full md:grid-cols-1'>
              {spaceProcess ? (
                <Spinner className='text-indigo-500' width={20} />
              ) : (
                spaces &&
                spaces.length > 0 &&
                spaces.map((space) => {
                  return (
                    <li className='' key={space.id}>
                      <input
                        type='radio'
                        id={space.id}
                        name='space'
                        value={space.id}
                        className='inline-block w-full hidden peer'
                        onChange={handleChange}
                        required
                      />
                      <label
                        htmlFor={space.id}
                        className='inline-flex justify-between items-center p-5 w-full text-gray-500 bg-white rounded-lg border border-gray-200 cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 dark:peer-checked:text-blue-500 peer-checked:border-blue-600 peer-checked:text-blue-600 hover:text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:bg-gray-800 dark:hover:bg-gray-700'
                      >
                        <div className='block'>
                          <div className='w-full text-lg font-semibold'>
                            {space.name}
                          </div>
                        </div>
                        <svg
                          aria-hidden='true'
                          className='ml-3 w-6 h-6'
                          fill='currentColor'
                          viewBox='0 0 20 20'
                          xmlns='http://www.w3.org/2000/svg'
                        >
                          <path
                            fillRule='evenodd'
                            d='M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z'
                            clipRule='evenodd'
                          ></path>
                        </svg>
                      </label>
                    </li>
                  )
                })
              )}
            </ul>
          </div>

          <div className='w-full md:basis-8/12'>
            <ul className='w-full divide-y divide-gray-100'>
              {taskProcess ? (
                <Spinner className='text-indigo-500' width={40} />
              ) : (
                tasks &&
                tasks.map((task, index) => (
                  <li
                    key={`${task.id}-${index}`}
                    className='p-3 hover:bg-blue-600 hover:text-blue-200'
                    onClick={() => {}}
                  >
                    <h3 className='font-bold text-xl'>{task.name}</h3>
                    <p className='mt-3 lg:w-full leading-relaxed text-base'>
                      {task.description &&
                        task.description.substring(0, 100) + '...'}
                    </p>
                  </li>
                ))
              )}
            </ul>
          </div>
        </div>
      </section>
    </div>
  )
}

export default ImportTask
