schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Action {
  id: ID!
  actionId: BigInt!
  orgId: BigInt!
  organizationSnapshot: OrganizationSnapshot!
  initiator: String!
  targetAddress: String
  value: BigInt
  data: Bytes
  executed: Boolean!
  tokenAddress: String
  actionType: Int!
  approvedBy: [String!]
  initiatedAt: BigInt!
  completedAt: BigInt
  oldValue: Bytes
  updateCount: BigInt!
}

type ActionSnapshot {
  id: ID!
  actionId: BigInt!
  orgId: BigInt!
  organizationSnapshot: OrganizationSnapshot!
  initiator: String!
  targetAddress: String
  value: BigInt
  data: Bytes
  executed: Boolean!
  tokenAddress: String
  actionType: Int!
  approvedBy: [String!]
  initiatedAt: BigInt!
  completedAt: BigInt
  actor: String!
  block: BigInt!
  timestamp: BigInt!
  updateCount: BigInt!
}

input ActionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  actionId: BigInt
  actionId_not: BigInt
  actionId_gt: BigInt
  actionId_lt: BigInt
  actionId_gte: BigInt
  actionId_lte: BigInt
  actionId_in: [BigInt!]
  actionId_not_in: [BigInt!]
  orgId: BigInt
  orgId_not: BigInt
  orgId_gt: BigInt
  orgId_lt: BigInt
  orgId_gte: BigInt
  orgId_lte: BigInt
  orgId_in: [BigInt!]
  orgId_not_in: [BigInt!]
  organizationSnapshot: String
  organizationSnapshot_not: String
  organizationSnapshot_gt: String
  organizationSnapshot_lt: String
  organizationSnapshot_gte: String
  organizationSnapshot_lte: String
  organizationSnapshot_in: [String!]
  organizationSnapshot_not_in: [String!]
  organizationSnapshot_contains: String
  organizationSnapshot_contains_nocase: String
  organizationSnapshot_not_contains: String
  organizationSnapshot_not_contains_nocase: String
  organizationSnapshot_starts_with: String
  organizationSnapshot_starts_with_nocase: String
  organizationSnapshot_not_starts_with: String
  organizationSnapshot_not_starts_with_nocase: String
  organizationSnapshot_ends_with: String
  organizationSnapshot_ends_with_nocase: String
  organizationSnapshot_not_ends_with: String
  organizationSnapshot_not_ends_with_nocase: String
  organizationSnapshot_: OrganizationSnapshot_filter
  initiator: String
  initiator_not: String
  initiator_gt: String
  initiator_lt: String
  initiator_gte: String
  initiator_lte: String
  initiator_in: [String!]
  initiator_not_in: [String!]
  initiator_contains: String
  initiator_contains_nocase: String
  initiator_not_contains: String
  initiator_not_contains_nocase: String
  initiator_starts_with: String
  initiator_starts_with_nocase: String
  initiator_not_starts_with: String
  initiator_not_starts_with_nocase: String
  initiator_ends_with: String
  initiator_ends_with_nocase: String
  initiator_not_ends_with: String
  initiator_not_ends_with_nocase: String
  targetAddress: String
  targetAddress_not: String
  targetAddress_gt: String
  targetAddress_lt: String
  targetAddress_gte: String
  targetAddress_lte: String
  targetAddress_in: [String!]
  targetAddress_not_in: [String!]
  targetAddress_contains: String
  targetAddress_contains_nocase: String
  targetAddress_not_contains: String
  targetAddress_not_contains_nocase: String
  targetAddress_starts_with: String
  targetAddress_starts_with_nocase: String
  targetAddress_not_starts_with: String
  targetAddress_not_starts_with_nocase: String
  targetAddress_ends_with: String
  targetAddress_ends_with_nocase: String
  targetAddress_not_ends_with: String
  targetAddress_not_ends_with_nocase: String
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
  data: Bytes
  data_not: Bytes
  data_gt: Bytes
  data_lt: Bytes
  data_gte: Bytes
  data_lte: Bytes
  data_in: [Bytes!]
  data_not_in: [Bytes!]
  data_contains: Bytes
  data_not_contains: Bytes
  executed: Boolean
  executed_not: Boolean
  executed_in: [Boolean!]
  executed_not_in: [Boolean!]
  tokenAddress: String
  tokenAddress_not: String
  tokenAddress_gt: String
  tokenAddress_lt: String
  tokenAddress_gte: String
  tokenAddress_lte: String
  tokenAddress_in: [String!]
  tokenAddress_not_in: [String!]
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  actionType: Int
  actionType_not: Int
  actionType_gt: Int
  actionType_lt: Int
  actionType_gte: Int
  actionType_lte: Int
  actionType_in: [Int!]
  actionType_not_in: [Int!]
  approvedBy: [String!]
  approvedBy_not: [String!]
  approvedBy_contains: [String!]
  approvedBy_contains_nocase: [String!]
  approvedBy_not_contains: [String!]
  approvedBy_not_contains_nocase: [String!]
  initiatedAt: BigInt
  initiatedAt_not: BigInt
  initiatedAt_gt: BigInt
  initiatedAt_lt: BigInt
  initiatedAt_gte: BigInt
  initiatedAt_lte: BigInt
  initiatedAt_in: [BigInt!]
  initiatedAt_not_in: [BigInt!]
  completedAt: BigInt
  completedAt_not: BigInt
  completedAt_gt: BigInt
  completedAt_lt: BigInt
  completedAt_gte: BigInt
  completedAt_lte: BigInt
  completedAt_in: [BigInt!]
  completedAt_not_in: [BigInt!]
  actor: String
  actor_not: String
  actor_gt: String
  actor_lt: String
  actor_gte: String
  actor_lte: String
  actor_in: [String!]
  actor_not_in: [String!]
  actor_contains: String
  actor_contains_nocase: String
  actor_not_contains: String
  actor_not_contains_nocase: String
  actor_starts_with: String
  actor_starts_with_nocase: String
  actor_not_starts_with: String
  actor_not_starts_with_nocase: String
  actor_ends_with: String
  actor_ends_with_nocase: String
  actor_not_ends_with: String
  actor_not_ends_with_nocase: String
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  updateCount: BigInt
  updateCount_not: BigInt
  updateCount_gt: BigInt
  updateCount_lt: BigInt
  updateCount_gte: BigInt
  updateCount_lte: BigInt
  updateCount_in: [BigInt!]
  updateCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ActionSnapshot_filter]
  or: [ActionSnapshot_filter]
}

enum ActionSnapshot_orderBy {
  id
  actionId
  orgId
  organizationSnapshot
  organizationSnapshot__id
  organizationSnapshot__orgId
  organizationSnapshot__name
  organizationSnapshot__description
  organizationSnapshot__requiredTaskApprovals
  organizationSnapshot__requiredConfirmations
  organizationSnapshot__rewardMultiplier
  organizationSnapshot__rewardSlashMultiplier
  organizationSnapshot__slashRewardEvery
  organizationSnapshot__rewardToken
  organizationSnapshot__isInitialized
  initiator
  targetAddress
  value
  data
  executed
  tokenAddress
  actionType
  approvedBy
  initiatedAt
  completedAt
  actor
  block
  timestamp
  updateCount
}

input Action_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  actionId: BigInt
  actionId_not: BigInt
  actionId_gt: BigInt
  actionId_lt: BigInt
  actionId_gte: BigInt
  actionId_lte: BigInt
  actionId_in: [BigInt!]
  actionId_not_in: [BigInt!]
  orgId: BigInt
  orgId_not: BigInt
  orgId_gt: BigInt
  orgId_lt: BigInt
  orgId_gte: BigInt
  orgId_lte: BigInt
  orgId_in: [BigInt!]
  orgId_not_in: [BigInt!]
  organizationSnapshot: String
  organizationSnapshot_not: String
  organizationSnapshot_gt: String
  organizationSnapshot_lt: String
  organizationSnapshot_gte: String
  organizationSnapshot_lte: String
  organizationSnapshot_in: [String!]
  organizationSnapshot_not_in: [String!]
  organizationSnapshot_contains: String
  organizationSnapshot_contains_nocase: String
  organizationSnapshot_not_contains: String
  organizationSnapshot_not_contains_nocase: String
  organizationSnapshot_starts_with: String
  organizationSnapshot_starts_with_nocase: String
  organizationSnapshot_not_starts_with: String
  organizationSnapshot_not_starts_with_nocase: String
  organizationSnapshot_ends_with: String
  organizationSnapshot_ends_with_nocase: String
  organizationSnapshot_not_ends_with: String
  organizationSnapshot_not_ends_with_nocase: String
  organizationSnapshot_: OrganizationSnapshot_filter
  initiator: String
  initiator_not: String
  initiator_gt: String
  initiator_lt: String
  initiator_gte: String
  initiator_lte: String
  initiator_in: [String!]
  initiator_not_in: [String!]
  initiator_contains: String
  initiator_contains_nocase: String
  initiator_not_contains: String
  initiator_not_contains_nocase: String
  initiator_starts_with: String
  initiator_starts_with_nocase: String
  initiator_not_starts_with: String
  initiator_not_starts_with_nocase: String
  initiator_ends_with: String
  initiator_ends_with_nocase: String
  initiator_not_ends_with: String
  initiator_not_ends_with_nocase: String
  targetAddress: String
  targetAddress_not: String
  targetAddress_gt: String
  targetAddress_lt: String
  targetAddress_gte: String
  targetAddress_lte: String
  targetAddress_in: [String!]
  targetAddress_not_in: [String!]
  targetAddress_contains: String
  targetAddress_contains_nocase: String
  targetAddress_not_contains: String
  targetAddress_not_contains_nocase: String
  targetAddress_starts_with: String
  targetAddress_starts_with_nocase: String
  targetAddress_not_starts_with: String
  targetAddress_not_starts_with_nocase: String
  targetAddress_ends_with: String
  targetAddress_ends_with_nocase: String
  targetAddress_not_ends_with: String
  targetAddress_not_ends_with_nocase: String
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
  data: Bytes
  data_not: Bytes
  data_gt: Bytes
  data_lt: Bytes
  data_gte: Bytes
  data_lte: Bytes
  data_in: [Bytes!]
  data_not_in: [Bytes!]
  data_contains: Bytes
  data_not_contains: Bytes
  executed: Boolean
  executed_not: Boolean
  executed_in: [Boolean!]
  executed_not_in: [Boolean!]
  tokenAddress: String
  tokenAddress_not: String
  tokenAddress_gt: String
  tokenAddress_lt: String
  tokenAddress_gte: String
  tokenAddress_lte: String
  tokenAddress_in: [String!]
  tokenAddress_not_in: [String!]
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  actionType: Int
  actionType_not: Int
  actionType_gt: Int
  actionType_lt: Int
  actionType_gte: Int
  actionType_lte: Int
  actionType_in: [Int!]
  actionType_not_in: [Int!]
  approvedBy: [String!]
  approvedBy_not: [String!]
  approvedBy_contains: [String!]
  approvedBy_contains_nocase: [String!]
  approvedBy_not_contains: [String!]
  approvedBy_not_contains_nocase: [String!]
  initiatedAt: BigInt
  initiatedAt_not: BigInt
  initiatedAt_gt: BigInt
  initiatedAt_lt: BigInt
  initiatedAt_gte: BigInt
  initiatedAt_lte: BigInt
  initiatedAt_in: [BigInt!]
  initiatedAt_not_in: [BigInt!]
  completedAt: BigInt
  completedAt_not: BigInt
  completedAt_gt: BigInt
  completedAt_lt: BigInt
  completedAt_gte: BigInt
  completedAt_lte: BigInt
  completedAt_in: [BigInt!]
  completedAt_not_in: [BigInt!]
  oldValue: Bytes
  oldValue_not: Bytes
  oldValue_gt: Bytes
  oldValue_lt: Bytes
  oldValue_gte: Bytes
  oldValue_lte: Bytes
  oldValue_in: [Bytes!]
  oldValue_not_in: [Bytes!]
  oldValue_contains: Bytes
  oldValue_not_contains: Bytes
  updateCount: BigInt
  updateCount_not: BigInt
  updateCount_gt: BigInt
  updateCount_lt: BigInt
  updateCount_gte: BigInt
  updateCount_lte: BigInt
  updateCount_in: [BigInt!]
  updateCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Action_filter]
  or: [Action_filter]
}

enum Action_orderBy {
  id
  actionId
  orgId
  organizationSnapshot
  organizationSnapshot__id
  organizationSnapshot__orgId
  organizationSnapshot__name
  organizationSnapshot__description
  organizationSnapshot__requiredTaskApprovals
  organizationSnapshot__requiredConfirmations
  organizationSnapshot__rewardMultiplier
  organizationSnapshot__rewardSlashMultiplier
  organizationSnapshot__slashRewardEvery
  organizationSnapshot__rewardToken
  organizationSnapshot__isInitialized
  initiator
  targetAddress
  value
  data
  executed
  tokenAddress
  actionType
  approvedBy
  initiatedAt
  completedAt
  oldValue
  updateCount
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Deposit {
  id: ID!
  orgId: BigInt!
  token: String!
  amount: BigInt!
  initiator: String!
  completedAt: BigInt!
}

input Deposit_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  orgId: BigInt
  orgId_not: BigInt
  orgId_gt: BigInt
  orgId_lt: BigInt
  orgId_gte: BigInt
  orgId_lte: BigInt
  orgId_in: [BigInt!]
  orgId_not_in: [BigInt!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  initiator: String
  initiator_not: String
  initiator_gt: String
  initiator_lt: String
  initiator_gte: String
  initiator_lte: String
  initiator_in: [String!]
  initiator_not_in: [String!]
  initiator_contains: String
  initiator_contains_nocase: String
  initiator_not_contains: String
  initiator_not_contains_nocase: String
  initiator_starts_with: String
  initiator_starts_with_nocase: String
  initiator_not_starts_with: String
  initiator_not_starts_with_nocase: String
  initiator_ends_with: String
  initiator_ends_with_nocase: String
  initiator_not_ends_with: String
  initiator_not_ends_with_nocase: String
  completedAt: BigInt
  completedAt_not: BigInt
  completedAt_gt: BigInt
  completedAt_lt: BigInt
  completedAt_gte: BigInt
  completedAt_lte: BigInt
  completedAt_in: [BigInt!]
  completedAt_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Deposit_filter]
  or: [Deposit_filter]
}

enum Deposit_orderBy {
  id
  orgId
  token
  amount
  initiator
  completedAt
}

"""
8 bytes signed integer

"""
scalar Int8

type Notification {
  id: ID!
  tags: [String!]!
  users: [String!]
  orgId: Organization!
  task: Task
  action: Action
  deposit: Deposit
  taskSnapshot: TaskSnapshot
  actionSnapshot: ActionSnapshot
  timestamp: BigInt!
}

input Notification_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tags: [String!]
  tags_not: [String!]
  tags_contains: [String!]
  tags_contains_nocase: [String!]
  tags_not_contains: [String!]
  tags_not_contains_nocase: [String!]
  users: [String!]
  users_not: [String!]
  users_contains: [String!]
  users_contains_nocase: [String!]
  users_not_contains: [String!]
  users_not_contains_nocase: [String!]
  orgId: String
  orgId_not: String
  orgId_gt: String
  orgId_lt: String
  orgId_gte: String
  orgId_lte: String
  orgId_in: [String!]
  orgId_not_in: [String!]
  orgId_contains: String
  orgId_contains_nocase: String
  orgId_not_contains: String
  orgId_not_contains_nocase: String
  orgId_starts_with: String
  orgId_starts_with_nocase: String
  orgId_not_starts_with: String
  orgId_not_starts_with_nocase: String
  orgId_ends_with: String
  orgId_ends_with_nocase: String
  orgId_not_ends_with: String
  orgId_not_ends_with_nocase: String
  orgId_: Organization_filter
  task: String
  task_not: String
  task_gt: String
  task_lt: String
  task_gte: String
  task_lte: String
  task_in: [String!]
  task_not_in: [String!]
  task_contains: String
  task_contains_nocase: String
  task_not_contains: String
  task_not_contains_nocase: String
  task_starts_with: String
  task_starts_with_nocase: String
  task_not_starts_with: String
  task_not_starts_with_nocase: String
  task_ends_with: String
  task_ends_with_nocase: String
  task_not_ends_with: String
  task_not_ends_with_nocase: String
  task_: Task_filter
  action: String
  action_not: String
  action_gt: String
  action_lt: String
  action_gte: String
  action_lte: String
  action_in: [String!]
  action_not_in: [String!]
  action_contains: String
  action_contains_nocase: String
  action_not_contains: String
  action_not_contains_nocase: String
  action_starts_with: String
  action_starts_with_nocase: String
  action_not_starts_with: String
  action_not_starts_with_nocase: String
  action_ends_with: String
  action_ends_with_nocase: String
  action_not_ends_with: String
  action_not_ends_with_nocase: String
  action_: Action_filter
  deposit: String
  deposit_not: String
  deposit_gt: String
  deposit_lt: String
  deposit_gte: String
  deposit_lte: String
  deposit_in: [String!]
  deposit_not_in: [String!]
  deposit_contains: String
  deposit_contains_nocase: String
  deposit_not_contains: String
  deposit_not_contains_nocase: String
  deposit_starts_with: String
  deposit_starts_with_nocase: String
  deposit_not_starts_with: String
  deposit_not_starts_with_nocase: String
  deposit_ends_with: String
  deposit_ends_with_nocase: String
  deposit_not_ends_with: String
  deposit_not_ends_with_nocase: String
  deposit_: Deposit_filter
  taskSnapshot: String
  taskSnapshot_not: String
  taskSnapshot_gt: String
  taskSnapshot_lt: String
  taskSnapshot_gte: String
  taskSnapshot_lte: String
  taskSnapshot_in: [String!]
  taskSnapshot_not_in: [String!]
  taskSnapshot_contains: String
  taskSnapshot_contains_nocase: String
  taskSnapshot_not_contains: String
  taskSnapshot_not_contains_nocase: String
  taskSnapshot_starts_with: String
  taskSnapshot_starts_with_nocase: String
  taskSnapshot_not_starts_with: String
  taskSnapshot_not_starts_with_nocase: String
  taskSnapshot_ends_with: String
  taskSnapshot_ends_with_nocase: String
  taskSnapshot_not_ends_with: String
  taskSnapshot_not_ends_with_nocase: String
  taskSnapshot_: TaskSnapshot_filter
  actionSnapshot: String
  actionSnapshot_not: String
  actionSnapshot_gt: String
  actionSnapshot_lt: String
  actionSnapshot_gte: String
  actionSnapshot_lte: String
  actionSnapshot_in: [String!]
  actionSnapshot_not_in: [String!]
  actionSnapshot_contains: String
  actionSnapshot_contains_nocase: String
  actionSnapshot_not_contains: String
  actionSnapshot_not_contains_nocase: String
  actionSnapshot_starts_with: String
  actionSnapshot_starts_with_nocase: String
  actionSnapshot_not_starts_with: String
  actionSnapshot_not_starts_with_nocase: String
  actionSnapshot_ends_with: String
  actionSnapshot_ends_with_nocase: String
  actionSnapshot_not_ends_with: String
  actionSnapshot_not_ends_with_nocase: String
  actionSnapshot_: ActionSnapshot_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Notification_filter]
  or: [Notification_filter]
}

enum Notification_orderBy {
  id
  tags
  users
  orgId
  orgId__id
  orgId__orgId
  orgId__name
  orgId__description
  orgId__requiredTaskApprovals
  orgId__requiredConfirmations
  orgId__rewardMultiplier
  orgId__rewardSlashMultiplier
  orgId__slashRewardEvery
  orgId__rewardToken
  orgId__isInitialized
  task
  task__id
  task__taskId
  task__externalId
  task__title
  task__description
  task__assigner
  task__assignee
  task__teamAssignee
  task__status
  task__complexityScore
  task__reputationLevel
  task__requiredApprovals
  task__rewardAmount
  task__rewardToken
  task__assignDate
  task__submitDate
  task__dueDate
  task__comment
  task__staked
  task__raw
  task__disableSelfAssign
  action
  action__id
  action__actionId
  action__orgId
  action__initiator
  action__targetAddress
  action__value
  action__data
  action__executed
  action__tokenAddress
  action__actionType
  action__initiatedAt
  action__completedAt
  action__oldValue
  action__updateCount
  deposit
  deposit__id
  deposit__orgId
  deposit__token
  deposit__amount
  deposit__initiator
  deposit__completedAt
  taskSnapshot
  taskSnapshot__id
  taskSnapshot__actor
  taskSnapshot__block
  taskSnapshot__timestamp
  taskSnapshot__taskId
  taskSnapshot__title
  taskSnapshot__description
  taskSnapshot__assigner
  taskSnapshot__assignee
  taskSnapshot__teamAssignee
  taskSnapshot__status
  taskSnapshot__complexityScore
  taskSnapshot__reputationLevel
  taskSnapshot__requiredApprovals
  taskSnapshot__rewardAmount
  taskSnapshot__rewardToken
  taskSnapshot__assignDate
  taskSnapshot__submitDate
  taskSnapshot__dueDate
  taskSnapshot__comment
  taskSnapshot__staked
  taskSnapshot__disableSelfAssign
  actionSnapshot
  actionSnapshot__id
  actionSnapshot__actionId
  actionSnapshot__orgId
  actionSnapshot__initiator
  actionSnapshot__targetAddress
  actionSnapshot__value
  actionSnapshot__data
  actionSnapshot__executed
  actionSnapshot__tokenAddress
  actionSnapshot__actionType
  actionSnapshot__initiatedAt
  actionSnapshot__completedAt
  actionSnapshot__actor
  actionSnapshot__block
  actionSnapshot__timestamp
  actionSnapshot__updateCount
  timestamp
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Organization {
  id: ID!
  orgId: BigInt!
  name: String!
  description: String!
  approvers: [String!]!
  signers: [String!]!
  members: [String!]
  requiredTaskApprovals: BigInt!
  requiredConfirmations: BigInt!
  rewardMultiplier: BigInt!
  rewardSlashMultiplier: BigInt!
  slashRewardEvery: BigInt!
  rewardToken: Bytes!
  isInitialized: Boolean!
  treasury: Treasury!
  stat: OrganizationStat
}

type OrganizationSnapshot {
  id: ID!
  orgId: BigInt!
  name: String!
  description: String!
  approvers: [String!]!
  signers: [String!]!
  requiredTaskApprovals: BigInt!
  requiredConfirmations: BigInt!
  rewardMultiplier: BigInt!
  rewardSlashMultiplier: BigInt!
  slashRewardEvery: BigInt!
  rewardToken: Bytes!
  isInitialized: Boolean!
  treasury: Treasury!
  stat: OrganizationStat
}

input OrganizationSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  orgId: BigInt
  orgId_not: BigInt
  orgId_gt: BigInt
  orgId_lt: BigInt
  orgId_gte: BigInt
  orgId_lte: BigInt
  orgId_in: [BigInt!]
  orgId_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  approvers: [String!]
  approvers_not: [String!]
  approvers_contains: [String!]
  approvers_contains_nocase: [String!]
  approvers_not_contains: [String!]
  approvers_not_contains_nocase: [String!]
  signers: [String!]
  signers_not: [String!]
  signers_contains: [String!]
  signers_contains_nocase: [String!]
  signers_not_contains: [String!]
  signers_not_contains_nocase: [String!]
  requiredTaskApprovals: BigInt
  requiredTaskApprovals_not: BigInt
  requiredTaskApprovals_gt: BigInt
  requiredTaskApprovals_lt: BigInt
  requiredTaskApprovals_gte: BigInt
  requiredTaskApprovals_lte: BigInt
  requiredTaskApprovals_in: [BigInt!]
  requiredTaskApprovals_not_in: [BigInt!]
  requiredConfirmations: BigInt
  requiredConfirmations_not: BigInt
  requiredConfirmations_gt: BigInt
  requiredConfirmations_lt: BigInt
  requiredConfirmations_gte: BigInt
  requiredConfirmations_lte: BigInt
  requiredConfirmations_in: [BigInt!]
  requiredConfirmations_not_in: [BigInt!]
  rewardMultiplier: BigInt
  rewardMultiplier_not: BigInt
  rewardMultiplier_gt: BigInt
  rewardMultiplier_lt: BigInt
  rewardMultiplier_gte: BigInt
  rewardMultiplier_lte: BigInt
  rewardMultiplier_in: [BigInt!]
  rewardMultiplier_not_in: [BigInt!]
  rewardSlashMultiplier: BigInt
  rewardSlashMultiplier_not: BigInt
  rewardSlashMultiplier_gt: BigInt
  rewardSlashMultiplier_lt: BigInt
  rewardSlashMultiplier_gte: BigInt
  rewardSlashMultiplier_lte: BigInt
  rewardSlashMultiplier_in: [BigInt!]
  rewardSlashMultiplier_not_in: [BigInt!]
  slashRewardEvery: BigInt
  slashRewardEvery_not: BigInt
  slashRewardEvery_gt: BigInt
  slashRewardEvery_lt: BigInt
  slashRewardEvery_gte: BigInt
  slashRewardEvery_lte: BigInt
  slashRewardEvery_in: [BigInt!]
  slashRewardEvery_not_in: [BigInt!]
  rewardToken: Bytes
  rewardToken_not: Bytes
  rewardToken_gt: Bytes
  rewardToken_lt: Bytes
  rewardToken_gte: Bytes
  rewardToken_lte: Bytes
  rewardToken_in: [Bytes!]
  rewardToken_not_in: [Bytes!]
  rewardToken_contains: Bytes
  rewardToken_not_contains: Bytes
  isInitialized: Boolean
  isInitialized_not: Boolean
  isInitialized_in: [Boolean!]
  isInitialized_not_in: [Boolean!]
  treasury: String
  treasury_not: String
  treasury_gt: String
  treasury_lt: String
  treasury_gte: String
  treasury_lte: String
  treasury_in: [String!]
  treasury_not_in: [String!]
  treasury_contains: String
  treasury_contains_nocase: String
  treasury_not_contains: String
  treasury_not_contains_nocase: String
  treasury_starts_with: String
  treasury_starts_with_nocase: String
  treasury_not_starts_with: String
  treasury_not_starts_with_nocase: String
  treasury_ends_with: String
  treasury_ends_with_nocase: String
  treasury_not_ends_with: String
  treasury_not_ends_with_nocase: String
  treasury_: Treasury_filter
  stat: String
  stat_not: String
  stat_gt: String
  stat_lt: String
  stat_gte: String
  stat_lte: String
  stat_in: [String!]
  stat_not_in: [String!]
  stat_contains: String
  stat_contains_nocase: String
  stat_not_contains: String
  stat_not_contains_nocase: String
  stat_starts_with: String
  stat_starts_with_nocase: String
  stat_not_starts_with: String
  stat_not_starts_with_nocase: String
  stat_ends_with: String
  stat_ends_with_nocase: String
  stat_not_ends_with: String
  stat_not_ends_with_nocase: String
  stat_: OrganizationStat_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OrganizationSnapshot_filter]
  or: [OrganizationSnapshot_filter]
}

enum OrganizationSnapshot_orderBy {
  id
  orgId
  name
  description
  approvers
  signers
  requiredTaskApprovals
  requiredConfirmations
  rewardMultiplier
  rewardSlashMultiplier
  slashRewardEvery
  rewardToken
  isInitialized
  treasury
  treasury__id
  treasury__orgId
  stat
  stat__id
  stat__proposedTasks
  stat__openedTasks
  stat__assignedTasks
  stat__submittedTasks
  stat__closedTasks
  stat__archivedTasks
}

type OrganizationStat {
  id: ID!
  proposedTasks: BigInt!
  openedTasks: BigInt!
  assignedTasks: BigInt!
  submittedTasks: BigInt!
  closedTasks: BigInt!
  archivedTasks: BigInt!
  tags: [BigInt!]
}

input OrganizationStat_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  proposedTasks: BigInt
  proposedTasks_not: BigInt
  proposedTasks_gt: BigInt
  proposedTasks_lt: BigInt
  proposedTasks_gte: BigInt
  proposedTasks_lte: BigInt
  proposedTasks_in: [BigInt!]
  proposedTasks_not_in: [BigInt!]
  openedTasks: BigInt
  openedTasks_not: BigInt
  openedTasks_gt: BigInt
  openedTasks_lt: BigInt
  openedTasks_gte: BigInt
  openedTasks_lte: BigInt
  openedTasks_in: [BigInt!]
  openedTasks_not_in: [BigInt!]
  assignedTasks: BigInt
  assignedTasks_not: BigInt
  assignedTasks_gt: BigInt
  assignedTasks_lt: BigInt
  assignedTasks_gte: BigInt
  assignedTasks_lte: BigInt
  assignedTasks_in: [BigInt!]
  assignedTasks_not_in: [BigInt!]
  submittedTasks: BigInt
  submittedTasks_not: BigInt
  submittedTasks_gt: BigInt
  submittedTasks_lt: BigInt
  submittedTasks_gte: BigInt
  submittedTasks_lte: BigInt
  submittedTasks_in: [BigInt!]
  submittedTasks_not_in: [BigInt!]
  closedTasks: BigInt
  closedTasks_not: BigInt
  closedTasks_gt: BigInt
  closedTasks_lt: BigInt
  closedTasks_gte: BigInt
  closedTasks_lte: BigInt
  closedTasks_in: [BigInt!]
  closedTasks_not_in: [BigInt!]
  archivedTasks: BigInt
  archivedTasks_not: BigInt
  archivedTasks_gt: BigInt
  archivedTasks_lt: BigInt
  archivedTasks_gte: BigInt
  archivedTasks_lte: BigInt
  archivedTasks_in: [BigInt!]
  archivedTasks_not_in: [BigInt!]
  tags: [BigInt!]
  tags_not: [BigInt!]
  tags_contains: [BigInt!]
  tags_contains_nocase: [BigInt!]
  tags_not_contains: [BigInt!]
  tags_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OrganizationStat_filter]
  or: [OrganizationStat_filter]
}

enum OrganizationStat_orderBy {
  id
  proposedTasks
  openedTasks
  assignedTasks
  submittedTasks
  closedTasks
  archivedTasks
  tags
}

input Organization_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  orgId: BigInt
  orgId_not: BigInt
  orgId_gt: BigInt
  orgId_lt: BigInt
  orgId_gte: BigInt
  orgId_lte: BigInt
  orgId_in: [BigInt!]
  orgId_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  approvers: [String!]
  approvers_not: [String!]
  approvers_contains: [String!]
  approvers_contains_nocase: [String!]
  approvers_not_contains: [String!]
  approvers_not_contains_nocase: [String!]
  signers: [String!]
  signers_not: [String!]
  signers_contains: [String!]
  signers_contains_nocase: [String!]
  signers_not_contains: [String!]
  signers_not_contains_nocase: [String!]
  members: [String!]
  members_not: [String!]
  members_contains: [String!]
  members_contains_nocase: [String!]
  members_not_contains: [String!]
  members_not_contains_nocase: [String!]
  requiredTaskApprovals: BigInt
  requiredTaskApprovals_not: BigInt
  requiredTaskApprovals_gt: BigInt
  requiredTaskApprovals_lt: BigInt
  requiredTaskApprovals_gte: BigInt
  requiredTaskApprovals_lte: BigInt
  requiredTaskApprovals_in: [BigInt!]
  requiredTaskApprovals_not_in: [BigInt!]
  requiredConfirmations: BigInt
  requiredConfirmations_not: BigInt
  requiredConfirmations_gt: BigInt
  requiredConfirmations_lt: BigInt
  requiredConfirmations_gte: BigInt
  requiredConfirmations_lte: BigInt
  requiredConfirmations_in: [BigInt!]
  requiredConfirmations_not_in: [BigInt!]
  rewardMultiplier: BigInt
  rewardMultiplier_not: BigInt
  rewardMultiplier_gt: BigInt
  rewardMultiplier_lt: BigInt
  rewardMultiplier_gte: BigInt
  rewardMultiplier_lte: BigInt
  rewardMultiplier_in: [BigInt!]
  rewardMultiplier_not_in: [BigInt!]
  rewardSlashMultiplier: BigInt
  rewardSlashMultiplier_not: BigInt
  rewardSlashMultiplier_gt: BigInt
  rewardSlashMultiplier_lt: BigInt
  rewardSlashMultiplier_gte: BigInt
  rewardSlashMultiplier_lte: BigInt
  rewardSlashMultiplier_in: [BigInt!]
  rewardSlashMultiplier_not_in: [BigInt!]
  slashRewardEvery: BigInt
  slashRewardEvery_not: BigInt
  slashRewardEvery_gt: BigInt
  slashRewardEvery_lt: BigInt
  slashRewardEvery_gte: BigInt
  slashRewardEvery_lte: BigInt
  slashRewardEvery_in: [BigInt!]
  slashRewardEvery_not_in: [BigInt!]
  rewardToken: Bytes
  rewardToken_not: Bytes
  rewardToken_gt: Bytes
  rewardToken_lt: Bytes
  rewardToken_gte: Bytes
  rewardToken_lte: Bytes
  rewardToken_in: [Bytes!]
  rewardToken_not_in: [Bytes!]
  rewardToken_contains: Bytes
  rewardToken_not_contains: Bytes
  isInitialized: Boolean
  isInitialized_not: Boolean
  isInitialized_in: [Boolean!]
  isInitialized_not_in: [Boolean!]
  treasury: String
  treasury_not: String
  treasury_gt: String
  treasury_lt: String
  treasury_gte: String
  treasury_lte: String
  treasury_in: [String!]
  treasury_not_in: [String!]
  treasury_contains: String
  treasury_contains_nocase: String
  treasury_not_contains: String
  treasury_not_contains_nocase: String
  treasury_starts_with: String
  treasury_starts_with_nocase: String
  treasury_not_starts_with: String
  treasury_not_starts_with_nocase: String
  treasury_ends_with: String
  treasury_ends_with_nocase: String
  treasury_not_ends_with: String
  treasury_not_ends_with_nocase: String
  treasury_: Treasury_filter
  stat: String
  stat_not: String
  stat_gt: String
  stat_lt: String
  stat_gte: String
  stat_lte: String
  stat_in: [String!]
  stat_not_in: [String!]
  stat_contains: String
  stat_contains_nocase: String
  stat_not_contains: String
  stat_not_contains_nocase: String
  stat_starts_with: String
  stat_starts_with_nocase: String
  stat_not_starts_with: String
  stat_not_starts_with_nocase: String
  stat_ends_with: String
  stat_ends_with_nocase: String
  stat_not_ends_with: String
  stat_not_ends_with_nocase: String
  stat_: OrganizationStat_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Organization_filter]
  or: [Organization_filter]
}

enum Organization_orderBy {
  id
  orgId
  name
  description
  approvers
  signers
  members
  requiredTaskApprovals
  requiredConfirmations
  rewardMultiplier
  rewardSlashMultiplier
  slashRewardEvery
  rewardToken
  isInitialized
  treasury
  treasury__id
  treasury__orgId
  stat
  stat__id
  stat__proposedTasks
  stat__openedTasks
  stat__assignedTasks
  stat__submittedTasks
  stat__closedTasks
  stat__archivedTasks
}

type Query {
  userStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserStat
  userStats(
    skip: Int = 0
    first: Int = 100
    orderBy: UserStat_orderBy
    orderDirection: OrderDirection
    where: UserStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserStat!]!
  userToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserToken
  userTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: UserToken_orderBy
    orderDirection: OrderDirection
    where: UserToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserToken!]!
  organizationStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrganizationStat
  organizationStats(
    skip: Int = 0
    first: Int = 100
    orderBy: OrganizationStat_orderBy
    orderDirection: OrderDirection
    where: OrganizationStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrganizationStat!]!
  organization(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Organization
  organizations(
    skip: Int = 0
    first: Int = 100
    orderBy: Organization_orderBy
    orderDirection: OrderDirection
    where: Organization_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Organization!]!
  organizationSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrganizationSnapshot
  organizationSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: OrganizationSnapshot_orderBy
    orderDirection: OrderDirection
    where: OrganizationSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrganizationSnapshot!]!
  task(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Task
  tasks(
    skip: Int = 0
    first: Int = 100
    orderBy: Task_orderBy
    orderDirection: OrderDirection
    where: Task_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Task!]!
  taskRevision(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskRevision
  taskRevisions(
    skip: Int = 0
    first: Int = 100
    orderBy: TaskRevision_orderBy
    orderDirection: OrderDirection
    where: TaskRevision_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TaskRevision!]!
  taskSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskSnapshot
  taskSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TaskSnapshot_orderBy
    orderDirection: OrderDirection
    where: TaskSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TaskSnapshot!]!
  treasuryToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TreasuryToken
  treasuryTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: TreasuryToken_orderBy
    orderDirection: OrderDirection
    where: TreasuryToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TreasuryToken!]!
  treasury(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Treasury
  treasuries(
    skip: Int = 0
    first: Int = 100
    orderBy: Treasury_orderBy
    orderDirection: OrderDirection
    where: Treasury_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Treasury!]!
  deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  action(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Action
  actions(
    skip: Int = 0
    first: Int = 100
    orderBy: Action_orderBy
    orderDirection: OrderDirection
    where: Action_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Action!]!
  actionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActionSnapshot
  actionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: ActionSnapshot_orderBy
    orderDirection: OrderDirection
    where: ActionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActionSnapshot!]!
  team(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Team
  teams(
    skip: Int = 0
    first: Int = 100
    orderBy: Team_orderBy
    orderDirection: OrderDirection
    where: Team_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Team!]!
  notification(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Notification
  notifications(
    skip: Int = 0
    first: Int = 100
    orderBy: Notification_orderBy
    orderDirection: OrderDirection
    where: Notification_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Notification!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  userStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserStat
  userStats(
    skip: Int = 0
    first: Int = 100
    orderBy: UserStat_orderBy
    orderDirection: OrderDirection
    where: UserStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserStat!]!
  userToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserToken
  userTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: UserToken_orderBy
    orderDirection: OrderDirection
    where: UserToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserToken!]!
  organizationStat(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrganizationStat
  organizationStats(
    skip: Int = 0
    first: Int = 100
    orderBy: OrganizationStat_orderBy
    orderDirection: OrderDirection
    where: OrganizationStat_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrganizationStat!]!
  organization(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Organization
  organizations(
    skip: Int = 0
    first: Int = 100
    orderBy: Organization_orderBy
    orderDirection: OrderDirection
    where: Organization_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Organization!]!
  organizationSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrganizationSnapshot
  organizationSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: OrganizationSnapshot_orderBy
    orderDirection: OrderDirection
    where: OrganizationSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrganizationSnapshot!]!
  task(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Task
  tasks(
    skip: Int = 0
    first: Int = 100
    orderBy: Task_orderBy
    orderDirection: OrderDirection
    where: Task_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Task!]!
  taskRevision(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskRevision
  taskRevisions(
    skip: Int = 0
    first: Int = 100
    orderBy: TaskRevision_orderBy
    orderDirection: OrderDirection
    where: TaskRevision_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TaskRevision!]!
  taskSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskSnapshot
  taskSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TaskSnapshot_orderBy
    orderDirection: OrderDirection
    where: TaskSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TaskSnapshot!]!
  treasuryToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TreasuryToken
  treasuryTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: TreasuryToken_orderBy
    orderDirection: OrderDirection
    where: TreasuryToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TreasuryToken!]!
  treasury(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Treasury
  treasuries(
    skip: Int = 0
    first: Int = 100
    orderBy: Treasury_orderBy
    orderDirection: OrderDirection
    where: Treasury_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Treasury!]!
  deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  action(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Action
  actions(
    skip: Int = 0
    first: Int = 100
    orderBy: Action_orderBy
    orderDirection: OrderDirection
    where: Action_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Action!]!
  actionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActionSnapshot
  actionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: ActionSnapshot_orderBy
    orderDirection: OrderDirection
    where: ActionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActionSnapshot!]!
  team(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Team
  teams(
    skip: Int = 0
    first: Int = 100
    orderBy: Team_orderBy
    orderDirection: OrderDirection
    where: Team_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Team!]!
  notification(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Notification
  notifications(
    skip: Int = 0
    first: Int = 100
    orderBy: Notification_orderBy
    orderDirection: OrderDirection
    where: Notification_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Notification!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Task {
  id: ID!
  taskId: BigInt!
  externalId: String
  orgId: Organization!
  title: String
  description: String
  assigner: String
  assignee: String
  teamAssignee: String
  team: Team
  taskTags: [BigInt!]!
  status: Int!
  complexityScore: BigInt!
  reputationLevel: BigInt!
  requiredApprovals: BigInt!
  rewardAmount: BigInt
  rewardToken: Bytes
  assignDate: BigInt
  submitDate: BigInt
  dueDate: BigInt!
  comment: String
  approvedBy: [String!]
  assignmentRequest: [String!]
  staked: Boolean!
  revisions(skip: Int = 0, first: Int = 100, orderBy: TaskRevision_orderBy, orderDirection: OrderDirection, where: TaskRevision_filter): [TaskRevision!]
  raw: String!
  disableSelfAssign: Boolean!
}

type TaskRevision {
  id: ID!
  task: Task!
  taskSnapshot: TaskSnapshot!
  revisionId: BigInt!
  requester: String!
  externalRevisionId: Bytes!
  revisionHash: Bytes!
  dueDateExtension: BigInt!
  dueDateExtensionRequest: BigInt!
  status: Int!
}

input TaskRevision_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  task: String
  task_not: String
  task_gt: String
  task_lt: String
  task_gte: String
  task_lte: String
  task_in: [String!]
  task_not_in: [String!]
  task_contains: String
  task_contains_nocase: String
  task_not_contains: String
  task_not_contains_nocase: String
  task_starts_with: String
  task_starts_with_nocase: String
  task_not_starts_with: String
  task_not_starts_with_nocase: String
  task_ends_with: String
  task_ends_with_nocase: String
  task_not_ends_with: String
  task_not_ends_with_nocase: String
  task_: Task_filter
  taskSnapshot: String
  taskSnapshot_not: String
  taskSnapshot_gt: String
  taskSnapshot_lt: String
  taskSnapshot_gte: String
  taskSnapshot_lte: String
  taskSnapshot_in: [String!]
  taskSnapshot_not_in: [String!]
  taskSnapshot_contains: String
  taskSnapshot_contains_nocase: String
  taskSnapshot_not_contains: String
  taskSnapshot_not_contains_nocase: String
  taskSnapshot_starts_with: String
  taskSnapshot_starts_with_nocase: String
  taskSnapshot_not_starts_with: String
  taskSnapshot_not_starts_with_nocase: String
  taskSnapshot_ends_with: String
  taskSnapshot_ends_with_nocase: String
  taskSnapshot_not_ends_with: String
  taskSnapshot_not_ends_with_nocase: String
  taskSnapshot_: TaskSnapshot_filter
  revisionId: BigInt
  revisionId_not: BigInt
  revisionId_gt: BigInt
  revisionId_lt: BigInt
  revisionId_gte: BigInt
  revisionId_lte: BigInt
  revisionId_in: [BigInt!]
  revisionId_not_in: [BigInt!]
  requester: String
  requester_not: String
  requester_gt: String
  requester_lt: String
  requester_gte: String
  requester_lte: String
  requester_in: [String!]
  requester_not_in: [String!]
  requester_contains: String
  requester_contains_nocase: String
  requester_not_contains: String
  requester_not_contains_nocase: String
  requester_starts_with: String
  requester_starts_with_nocase: String
  requester_not_starts_with: String
  requester_not_starts_with_nocase: String
  requester_ends_with: String
  requester_ends_with_nocase: String
  requester_not_ends_with: String
  requester_not_ends_with_nocase: String
  externalRevisionId: Bytes
  externalRevisionId_not: Bytes
  externalRevisionId_gt: Bytes
  externalRevisionId_lt: Bytes
  externalRevisionId_gte: Bytes
  externalRevisionId_lte: Bytes
  externalRevisionId_in: [Bytes!]
  externalRevisionId_not_in: [Bytes!]
  externalRevisionId_contains: Bytes
  externalRevisionId_not_contains: Bytes
  revisionHash: Bytes
  revisionHash_not: Bytes
  revisionHash_gt: Bytes
  revisionHash_lt: Bytes
  revisionHash_gte: Bytes
  revisionHash_lte: Bytes
  revisionHash_in: [Bytes!]
  revisionHash_not_in: [Bytes!]
  revisionHash_contains: Bytes
  revisionHash_not_contains: Bytes
  dueDateExtension: BigInt
  dueDateExtension_not: BigInt
  dueDateExtension_gt: BigInt
  dueDateExtension_lt: BigInt
  dueDateExtension_gte: BigInt
  dueDateExtension_lte: BigInt
  dueDateExtension_in: [BigInt!]
  dueDateExtension_not_in: [BigInt!]
  dueDateExtensionRequest: BigInt
  dueDateExtensionRequest_not: BigInt
  dueDateExtensionRequest_gt: BigInt
  dueDateExtensionRequest_lt: BigInt
  dueDateExtensionRequest_gte: BigInt
  dueDateExtensionRequest_lte: BigInt
  dueDateExtensionRequest_in: [BigInt!]
  dueDateExtensionRequest_not_in: [BigInt!]
  status: Int
  status_not: Int
  status_gt: Int
  status_lt: Int
  status_gte: Int
  status_lte: Int
  status_in: [Int!]
  status_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TaskRevision_filter]
  or: [TaskRevision_filter]
}

enum TaskRevision_orderBy {
  id
  task
  task__id
  task__taskId
  task__externalId
  task__title
  task__description
  task__assigner
  task__assignee
  task__teamAssignee
  task__status
  task__complexityScore
  task__reputationLevel
  task__requiredApprovals
  task__rewardAmount
  task__rewardToken
  task__assignDate
  task__submitDate
  task__dueDate
  task__comment
  task__staked
  task__raw
  task__disableSelfAssign
  taskSnapshot
  taskSnapshot__id
  taskSnapshot__actor
  taskSnapshot__block
  taskSnapshot__timestamp
  taskSnapshot__taskId
  taskSnapshot__title
  taskSnapshot__description
  taskSnapshot__assigner
  taskSnapshot__assignee
  taskSnapshot__teamAssignee
  taskSnapshot__status
  taskSnapshot__complexityScore
  taskSnapshot__reputationLevel
  taskSnapshot__requiredApprovals
  taskSnapshot__rewardAmount
  taskSnapshot__rewardToken
  taskSnapshot__assignDate
  taskSnapshot__submitDate
  taskSnapshot__dueDate
  taskSnapshot__comment
  taskSnapshot__staked
  taskSnapshot__disableSelfAssign
  revisionId
  requester
  externalRevisionId
  revisionHash
  dueDateExtension
  dueDateExtensionRequest
  status
}

type TaskSnapshot {
  id: ID!
  actor: String!
  block: BigInt!
  timestamp: BigInt!
  taskId: BigInt!
  orgId: Organization!
  title: String
  description: String
  assigner: String
  assignee: String
  teamAssignee: String
  team: Team
  taskTags: [BigInt!]!
  status: Int!
  complexityScore: BigInt
  reputationLevel: BigInt
  requiredApprovals: BigInt
  rewardAmount: BigInt
  rewardToken: Bytes
  assignDate: BigInt
  submitDate: BigInt
  dueDate: BigInt
  comment: String
  approvedBy: [String!]
  assignmentRequest: [String!]
  staked: Boolean!
  disableSelfAssign: Boolean!
}

input TaskSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  actor: String
  actor_not: String
  actor_gt: String
  actor_lt: String
  actor_gte: String
  actor_lte: String
  actor_in: [String!]
  actor_not_in: [String!]
  actor_contains: String
  actor_contains_nocase: String
  actor_not_contains: String
  actor_not_contains_nocase: String
  actor_starts_with: String
  actor_starts_with_nocase: String
  actor_not_starts_with: String
  actor_not_starts_with_nocase: String
  actor_ends_with: String
  actor_ends_with_nocase: String
  actor_not_ends_with: String
  actor_not_ends_with_nocase: String
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  taskId: BigInt
  taskId_not: BigInt
  taskId_gt: BigInt
  taskId_lt: BigInt
  taskId_gte: BigInt
  taskId_lte: BigInt
  taskId_in: [BigInt!]
  taskId_not_in: [BigInt!]
  orgId: String
  orgId_not: String
  orgId_gt: String
  orgId_lt: String
  orgId_gte: String
  orgId_lte: String
  orgId_in: [String!]
  orgId_not_in: [String!]
  orgId_contains: String
  orgId_contains_nocase: String
  orgId_not_contains: String
  orgId_not_contains_nocase: String
  orgId_starts_with: String
  orgId_starts_with_nocase: String
  orgId_not_starts_with: String
  orgId_not_starts_with_nocase: String
  orgId_ends_with: String
  orgId_ends_with_nocase: String
  orgId_not_ends_with: String
  orgId_not_ends_with_nocase: String
  orgId_: Organization_filter
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  assigner: String
  assigner_not: String
  assigner_gt: String
  assigner_lt: String
  assigner_gte: String
  assigner_lte: String
  assigner_in: [String!]
  assigner_not_in: [String!]
  assigner_contains: String
  assigner_contains_nocase: String
  assigner_not_contains: String
  assigner_not_contains_nocase: String
  assigner_starts_with: String
  assigner_starts_with_nocase: String
  assigner_not_starts_with: String
  assigner_not_starts_with_nocase: String
  assigner_ends_with: String
  assigner_ends_with_nocase: String
  assigner_not_ends_with: String
  assigner_not_ends_with_nocase: String
  assignee: String
  assignee_not: String
  assignee_gt: String
  assignee_lt: String
  assignee_gte: String
  assignee_lte: String
  assignee_in: [String!]
  assignee_not_in: [String!]
  assignee_contains: String
  assignee_contains_nocase: String
  assignee_not_contains: String
  assignee_not_contains_nocase: String
  assignee_starts_with: String
  assignee_starts_with_nocase: String
  assignee_not_starts_with: String
  assignee_not_starts_with_nocase: String
  assignee_ends_with: String
  assignee_ends_with_nocase: String
  assignee_not_ends_with: String
  assignee_not_ends_with_nocase: String
  teamAssignee: String
  teamAssignee_not: String
  teamAssignee_gt: String
  teamAssignee_lt: String
  teamAssignee_gte: String
  teamAssignee_lte: String
  teamAssignee_in: [String!]
  teamAssignee_not_in: [String!]
  teamAssignee_contains: String
  teamAssignee_contains_nocase: String
  teamAssignee_not_contains: String
  teamAssignee_not_contains_nocase: String
  teamAssignee_starts_with: String
  teamAssignee_starts_with_nocase: String
  teamAssignee_not_starts_with: String
  teamAssignee_not_starts_with_nocase: String
  teamAssignee_ends_with: String
  teamAssignee_ends_with_nocase: String
  teamAssignee_not_ends_with: String
  teamAssignee_not_ends_with_nocase: String
  team: String
  team_not: String
  team_gt: String
  team_lt: String
  team_gte: String
  team_lte: String
  team_in: [String!]
  team_not_in: [String!]
  team_contains: String
  team_contains_nocase: String
  team_not_contains: String
  team_not_contains_nocase: String
  team_starts_with: String
  team_starts_with_nocase: String
  team_not_starts_with: String
  team_not_starts_with_nocase: String
  team_ends_with: String
  team_ends_with_nocase: String
  team_not_ends_with: String
  team_not_ends_with_nocase: String
  team_: Team_filter
  taskTags: [BigInt!]
  taskTags_not: [BigInt!]
  taskTags_contains: [BigInt!]
  taskTags_contains_nocase: [BigInt!]
  taskTags_not_contains: [BigInt!]
  taskTags_not_contains_nocase: [BigInt!]
  status: Int
  status_not: Int
  status_gt: Int
  status_lt: Int
  status_gte: Int
  status_lte: Int
  status_in: [Int!]
  status_not_in: [Int!]
  complexityScore: BigInt
  complexityScore_not: BigInt
  complexityScore_gt: BigInt
  complexityScore_lt: BigInt
  complexityScore_gte: BigInt
  complexityScore_lte: BigInt
  complexityScore_in: [BigInt!]
  complexityScore_not_in: [BigInt!]
  reputationLevel: BigInt
  reputationLevel_not: BigInt
  reputationLevel_gt: BigInt
  reputationLevel_lt: BigInt
  reputationLevel_gte: BigInt
  reputationLevel_lte: BigInt
  reputationLevel_in: [BigInt!]
  reputationLevel_not_in: [BigInt!]
  requiredApprovals: BigInt
  requiredApprovals_not: BigInt
  requiredApprovals_gt: BigInt
  requiredApprovals_lt: BigInt
  requiredApprovals_gte: BigInt
  requiredApprovals_lte: BigInt
  requiredApprovals_in: [BigInt!]
  requiredApprovals_not_in: [BigInt!]
  rewardAmount: BigInt
  rewardAmount_not: BigInt
  rewardAmount_gt: BigInt
  rewardAmount_lt: BigInt
  rewardAmount_gte: BigInt
  rewardAmount_lte: BigInt
  rewardAmount_in: [BigInt!]
  rewardAmount_not_in: [BigInt!]
  rewardToken: Bytes
  rewardToken_not: Bytes
  rewardToken_gt: Bytes
  rewardToken_lt: Bytes
  rewardToken_gte: Bytes
  rewardToken_lte: Bytes
  rewardToken_in: [Bytes!]
  rewardToken_not_in: [Bytes!]
  rewardToken_contains: Bytes
  rewardToken_not_contains: Bytes
  assignDate: BigInt
  assignDate_not: BigInt
  assignDate_gt: BigInt
  assignDate_lt: BigInt
  assignDate_gte: BigInt
  assignDate_lte: BigInt
  assignDate_in: [BigInt!]
  assignDate_not_in: [BigInt!]
  submitDate: BigInt
  submitDate_not: BigInt
  submitDate_gt: BigInt
  submitDate_lt: BigInt
  submitDate_gte: BigInt
  submitDate_lte: BigInt
  submitDate_in: [BigInt!]
  submitDate_not_in: [BigInt!]
  dueDate: BigInt
  dueDate_not: BigInt
  dueDate_gt: BigInt
  dueDate_lt: BigInt
  dueDate_gte: BigInt
  dueDate_lte: BigInt
  dueDate_in: [BigInt!]
  dueDate_not_in: [BigInt!]
  comment: String
  comment_not: String
  comment_gt: String
  comment_lt: String
  comment_gte: String
  comment_lte: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_contains: String
  comment_contains_nocase: String
  comment_not_contains: String
  comment_not_contains_nocase: String
  comment_starts_with: String
  comment_starts_with_nocase: String
  comment_not_starts_with: String
  comment_not_starts_with_nocase: String
  comment_ends_with: String
  comment_ends_with_nocase: String
  comment_not_ends_with: String
  comment_not_ends_with_nocase: String
  approvedBy: [String!]
  approvedBy_not: [String!]
  approvedBy_contains: [String!]
  approvedBy_contains_nocase: [String!]
  approvedBy_not_contains: [String!]
  approvedBy_not_contains_nocase: [String!]
  assignmentRequest: [String!]
  assignmentRequest_not: [String!]
  assignmentRequest_contains: [String!]
  assignmentRequest_contains_nocase: [String!]
  assignmentRequest_not_contains: [String!]
  assignmentRequest_not_contains_nocase: [String!]
  staked: Boolean
  staked_not: Boolean
  staked_in: [Boolean!]
  staked_not_in: [Boolean!]
  disableSelfAssign: Boolean
  disableSelfAssign_not: Boolean
  disableSelfAssign_in: [Boolean!]
  disableSelfAssign_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TaskSnapshot_filter]
  or: [TaskSnapshot_filter]
}

enum TaskSnapshot_orderBy {
  id
  actor
  block
  timestamp
  taskId
  orgId
  orgId__id
  orgId__orgId
  orgId__name
  orgId__description
  orgId__requiredTaskApprovals
  orgId__requiredConfirmations
  orgId__rewardMultiplier
  orgId__rewardSlashMultiplier
  orgId__slashRewardEvery
  orgId__rewardToken
  orgId__isInitialized
  title
  description
  assigner
  assignee
  teamAssignee
  team
  team__id
  team__teamId
  team__name
  team__description
  team__walletAddress
  team__archived
  team__teamRewardMultiplier
  taskTags
  status
  complexityScore
  reputationLevel
  requiredApprovals
  rewardAmount
  rewardToken
  assignDate
  submitDate
  dueDate
  comment
  approvedBy
  assignmentRequest
  staked
  disableSelfAssign
}

input Task_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  taskId: BigInt
  taskId_not: BigInt
  taskId_gt: BigInt
  taskId_lt: BigInt
  taskId_gte: BigInt
  taskId_lte: BigInt
  taskId_in: [BigInt!]
  taskId_not_in: [BigInt!]
  externalId: String
  externalId_not: String
  externalId_gt: String
  externalId_lt: String
  externalId_gte: String
  externalId_lte: String
  externalId_in: [String!]
  externalId_not_in: [String!]
  externalId_contains: String
  externalId_contains_nocase: String
  externalId_not_contains: String
  externalId_not_contains_nocase: String
  externalId_starts_with: String
  externalId_starts_with_nocase: String
  externalId_not_starts_with: String
  externalId_not_starts_with_nocase: String
  externalId_ends_with: String
  externalId_ends_with_nocase: String
  externalId_not_ends_with: String
  externalId_not_ends_with_nocase: String
  orgId: String
  orgId_not: String
  orgId_gt: String
  orgId_lt: String
  orgId_gte: String
  orgId_lte: String
  orgId_in: [String!]
  orgId_not_in: [String!]
  orgId_contains: String
  orgId_contains_nocase: String
  orgId_not_contains: String
  orgId_not_contains_nocase: String
  orgId_starts_with: String
  orgId_starts_with_nocase: String
  orgId_not_starts_with: String
  orgId_not_starts_with_nocase: String
  orgId_ends_with: String
  orgId_ends_with_nocase: String
  orgId_not_ends_with: String
  orgId_not_ends_with_nocase: String
  orgId_: Organization_filter
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  assigner: String
  assigner_not: String
  assigner_gt: String
  assigner_lt: String
  assigner_gte: String
  assigner_lte: String
  assigner_in: [String!]
  assigner_not_in: [String!]
  assigner_contains: String
  assigner_contains_nocase: String
  assigner_not_contains: String
  assigner_not_contains_nocase: String
  assigner_starts_with: String
  assigner_starts_with_nocase: String
  assigner_not_starts_with: String
  assigner_not_starts_with_nocase: String
  assigner_ends_with: String
  assigner_ends_with_nocase: String
  assigner_not_ends_with: String
  assigner_not_ends_with_nocase: String
  assignee: String
  assignee_not: String
  assignee_gt: String
  assignee_lt: String
  assignee_gte: String
  assignee_lte: String
  assignee_in: [String!]
  assignee_not_in: [String!]
  assignee_contains: String
  assignee_contains_nocase: String
  assignee_not_contains: String
  assignee_not_contains_nocase: String
  assignee_starts_with: String
  assignee_starts_with_nocase: String
  assignee_not_starts_with: String
  assignee_not_starts_with_nocase: String
  assignee_ends_with: String
  assignee_ends_with_nocase: String
  assignee_not_ends_with: String
  assignee_not_ends_with_nocase: String
  teamAssignee: String
  teamAssignee_not: String
  teamAssignee_gt: String
  teamAssignee_lt: String
  teamAssignee_gte: String
  teamAssignee_lte: String
  teamAssignee_in: [String!]
  teamAssignee_not_in: [String!]
  teamAssignee_contains: String
  teamAssignee_contains_nocase: String
  teamAssignee_not_contains: String
  teamAssignee_not_contains_nocase: String
  teamAssignee_starts_with: String
  teamAssignee_starts_with_nocase: String
  teamAssignee_not_starts_with: String
  teamAssignee_not_starts_with_nocase: String
  teamAssignee_ends_with: String
  teamAssignee_ends_with_nocase: String
  teamAssignee_not_ends_with: String
  teamAssignee_not_ends_with_nocase: String
  team: String
  team_not: String
  team_gt: String
  team_lt: String
  team_gte: String
  team_lte: String
  team_in: [String!]
  team_not_in: [String!]
  team_contains: String
  team_contains_nocase: String
  team_not_contains: String
  team_not_contains_nocase: String
  team_starts_with: String
  team_starts_with_nocase: String
  team_not_starts_with: String
  team_not_starts_with_nocase: String
  team_ends_with: String
  team_ends_with_nocase: String
  team_not_ends_with: String
  team_not_ends_with_nocase: String
  team_: Team_filter
  taskTags: [BigInt!]
  taskTags_not: [BigInt!]
  taskTags_contains: [BigInt!]
  taskTags_contains_nocase: [BigInt!]
  taskTags_not_contains: [BigInt!]
  taskTags_not_contains_nocase: [BigInt!]
  status: Int
  status_not: Int
  status_gt: Int
  status_lt: Int
  status_gte: Int
  status_lte: Int
  status_in: [Int!]
  status_not_in: [Int!]
  complexityScore: BigInt
  complexityScore_not: BigInt
  complexityScore_gt: BigInt
  complexityScore_lt: BigInt
  complexityScore_gte: BigInt
  complexityScore_lte: BigInt
  complexityScore_in: [BigInt!]
  complexityScore_not_in: [BigInt!]
  reputationLevel: BigInt
  reputationLevel_not: BigInt
  reputationLevel_gt: BigInt
  reputationLevel_lt: BigInt
  reputationLevel_gte: BigInt
  reputationLevel_lte: BigInt
  reputationLevel_in: [BigInt!]
  reputationLevel_not_in: [BigInt!]
  requiredApprovals: BigInt
  requiredApprovals_not: BigInt
  requiredApprovals_gt: BigInt
  requiredApprovals_lt: BigInt
  requiredApprovals_gte: BigInt
  requiredApprovals_lte: BigInt
  requiredApprovals_in: [BigInt!]
  requiredApprovals_not_in: [BigInt!]
  rewardAmount: BigInt
  rewardAmount_not: BigInt
  rewardAmount_gt: BigInt
  rewardAmount_lt: BigInt
  rewardAmount_gte: BigInt
  rewardAmount_lte: BigInt
  rewardAmount_in: [BigInt!]
  rewardAmount_not_in: [BigInt!]
  rewardToken: Bytes
  rewardToken_not: Bytes
  rewardToken_gt: Bytes
  rewardToken_lt: Bytes
  rewardToken_gte: Bytes
  rewardToken_lte: Bytes
  rewardToken_in: [Bytes!]
  rewardToken_not_in: [Bytes!]
  rewardToken_contains: Bytes
  rewardToken_not_contains: Bytes
  assignDate: BigInt
  assignDate_not: BigInt
  assignDate_gt: BigInt
  assignDate_lt: BigInt
  assignDate_gte: BigInt
  assignDate_lte: BigInt
  assignDate_in: [BigInt!]
  assignDate_not_in: [BigInt!]
  submitDate: BigInt
  submitDate_not: BigInt
  submitDate_gt: BigInt
  submitDate_lt: BigInt
  submitDate_gte: BigInt
  submitDate_lte: BigInt
  submitDate_in: [BigInt!]
  submitDate_not_in: [BigInt!]
  dueDate: BigInt
  dueDate_not: BigInt
  dueDate_gt: BigInt
  dueDate_lt: BigInt
  dueDate_gte: BigInt
  dueDate_lte: BigInt
  dueDate_in: [BigInt!]
  dueDate_not_in: [BigInt!]
  comment: String
  comment_not: String
  comment_gt: String
  comment_lt: String
  comment_gte: String
  comment_lte: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_contains: String
  comment_contains_nocase: String
  comment_not_contains: String
  comment_not_contains_nocase: String
  comment_starts_with: String
  comment_starts_with_nocase: String
  comment_not_starts_with: String
  comment_not_starts_with_nocase: String
  comment_ends_with: String
  comment_ends_with_nocase: String
  comment_not_ends_with: String
  comment_not_ends_with_nocase: String
  approvedBy: [String!]
  approvedBy_not: [String!]
  approvedBy_contains: [String!]
  approvedBy_contains_nocase: [String!]
  approvedBy_not_contains: [String!]
  approvedBy_not_contains_nocase: [String!]
  assignmentRequest: [String!]
  assignmentRequest_not: [String!]
  assignmentRequest_contains: [String!]
  assignmentRequest_contains_nocase: [String!]
  assignmentRequest_not_contains: [String!]
  assignmentRequest_not_contains_nocase: [String!]
  staked: Boolean
  staked_not: Boolean
  staked_in: [Boolean!]
  staked_not_in: [Boolean!]
  revisions_: TaskRevision_filter
  raw: String
  raw_not: String
  raw_gt: String
  raw_lt: String
  raw_gte: String
  raw_lte: String
  raw_in: [String!]
  raw_not_in: [String!]
  raw_contains: String
  raw_contains_nocase: String
  raw_not_contains: String
  raw_not_contains_nocase: String
  raw_starts_with: String
  raw_starts_with_nocase: String
  raw_not_starts_with: String
  raw_not_starts_with_nocase: String
  raw_ends_with: String
  raw_ends_with_nocase: String
  raw_not_ends_with: String
  raw_not_ends_with_nocase: String
  disableSelfAssign: Boolean
  disableSelfAssign_not: Boolean
  disableSelfAssign_in: [Boolean!]
  disableSelfAssign_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Task_filter]
  or: [Task_filter]
}

enum Task_orderBy {
  id
  taskId
  externalId
  orgId
  orgId__id
  orgId__orgId
  orgId__name
  orgId__description
  orgId__requiredTaskApprovals
  orgId__requiredConfirmations
  orgId__rewardMultiplier
  orgId__rewardSlashMultiplier
  orgId__slashRewardEvery
  orgId__rewardToken
  orgId__isInitialized
  title
  description
  assigner
  assignee
  teamAssignee
  team
  team__id
  team__teamId
  team__name
  team__description
  team__walletAddress
  team__archived
  team__teamRewardMultiplier
  taskTags
  status
  complexityScore
  reputationLevel
  requiredApprovals
  rewardAmount
  rewardToken
  assignDate
  submitDate
  dueDate
  comment
  approvedBy
  assignmentRequest
  staked
  revisions
  raw
  disableSelfAssign
}

type Team {
  id: ID!
  teamId: BigInt!
  name: String!
  description: String!
  walletAddress: String!
  archived: Boolean!
  members: [String!]!
  teamRewardMultiplier: BigInt!
}

input Team_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  teamId: BigInt
  teamId_not: BigInt
  teamId_gt: BigInt
  teamId_lt: BigInt
  teamId_gte: BigInt
  teamId_lte: BigInt
  teamId_in: [BigInt!]
  teamId_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  walletAddress: String
  walletAddress_not: String
  walletAddress_gt: String
  walletAddress_lt: String
  walletAddress_gte: String
  walletAddress_lte: String
  walletAddress_in: [String!]
  walletAddress_not_in: [String!]
  walletAddress_contains: String
  walletAddress_contains_nocase: String
  walletAddress_not_contains: String
  walletAddress_not_contains_nocase: String
  walletAddress_starts_with: String
  walletAddress_starts_with_nocase: String
  walletAddress_not_starts_with: String
  walletAddress_not_starts_with_nocase: String
  walletAddress_ends_with: String
  walletAddress_ends_with_nocase: String
  walletAddress_not_ends_with: String
  walletAddress_not_ends_with_nocase: String
  archived: Boolean
  archived_not: Boolean
  archived_in: [Boolean!]
  archived_not_in: [Boolean!]
  members: [String!]
  members_not: [String!]
  members_contains: [String!]
  members_contains_nocase: [String!]
  members_not_contains: [String!]
  members_not_contains_nocase: [String!]
  teamRewardMultiplier: BigInt
  teamRewardMultiplier_not: BigInt
  teamRewardMultiplier_gt: BigInt
  teamRewardMultiplier_lt: BigInt
  teamRewardMultiplier_gte: BigInt
  teamRewardMultiplier_lte: BigInt
  teamRewardMultiplier_in: [BigInt!]
  teamRewardMultiplier_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Team_filter]
  or: [Team_filter]
}

enum Team_orderBy {
  id
  teamId
  name
  description
  walletAddress
  archived
  members
  teamRewardMultiplier
}

type Treasury {
  id: ID!
  orgId: BigInt!
  tokens(skip: Int = 0, first: Int = 100, orderBy: TreasuryToken_orderBy, orderDirection: OrderDirection, where: TreasuryToken_filter): [TreasuryToken!]
}

type TreasuryToken {
  id: ID!
  orgId: Treasury
  token: String!
  balance: BigInt!
  lockedBalance: BigInt!
}

input TreasuryToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  orgId: String
  orgId_not: String
  orgId_gt: String
  orgId_lt: String
  orgId_gte: String
  orgId_lte: String
  orgId_in: [String!]
  orgId_not_in: [String!]
  orgId_contains: String
  orgId_contains_nocase: String
  orgId_not_contains: String
  orgId_not_contains_nocase: String
  orgId_starts_with: String
  orgId_starts_with_nocase: String
  orgId_not_starts_with: String
  orgId_not_starts_with_nocase: String
  orgId_ends_with: String
  orgId_ends_with_nocase: String
  orgId_not_ends_with: String
  orgId_not_ends_with_nocase: String
  orgId_: Treasury_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  lockedBalance: BigInt
  lockedBalance_not: BigInt
  lockedBalance_gt: BigInt
  lockedBalance_lt: BigInt
  lockedBalance_gte: BigInt
  lockedBalance_lte: BigInt
  lockedBalance_in: [BigInt!]
  lockedBalance_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TreasuryToken_filter]
  or: [TreasuryToken_filter]
}

enum TreasuryToken_orderBy {
  id
  orgId
  orgId__id
  orgId__orgId
  token
  balance
  lockedBalance
}

input Treasury_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  orgId: BigInt
  orgId_not: BigInt
  orgId_gt: BigInt
  orgId_lt: BigInt
  orgId_gte: BigInt
  orgId_lte: BigInt
  orgId_in: [BigInt!]
  orgId_not_in: [BigInt!]
  tokens_: TreasuryToken_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Treasury_filter]
  or: [Treasury_filter]
}

enum Treasury_orderBy {
  id
  orgId
  tokens
}

type UserStat {
  id: ID!
  proposedTasks: BigInt!
  openedTasks: BigInt!
  assignedTasks: BigInt!
  submittedTasks: BigInt!
  closedTasks: BigInt!
  archivedTasks: BigInt!
  tokens(skip: Int = 0, first: Int = 100, orderBy: UserToken_orderBy, orderDirection: OrderDirection, where: UserToken_filter): [UserToken!]
}

input UserStat_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  proposedTasks: BigInt
  proposedTasks_not: BigInt
  proposedTasks_gt: BigInt
  proposedTasks_lt: BigInt
  proposedTasks_gte: BigInt
  proposedTasks_lte: BigInt
  proposedTasks_in: [BigInt!]
  proposedTasks_not_in: [BigInt!]
  openedTasks: BigInt
  openedTasks_not: BigInt
  openedTasks_gt: BigInt
  openedTasks_lt: BigInt
  openedTasks_gte: BigInt
  openedTasks_lte: BigInt
  openedTasks_in: [BigInt!]
  openedTasks_not_in: [BigInt!]
  assignedTasks: BigInt
  assignedTasks_not: BigInt
  assignedTasks_gt: BigInt
  assignedTasks_lt: BigInt
  assignedTasks_gte: BigInt
  assignedTasks_lte: BigInt
  assignedTasks_in: [BigInt!]
  assignedTasks_not_in: [BigInt!]
  submittedTasks: BigInt
  submittedTasks_not: BigInt
  submittedTasks_gt: BigInt
  submittedTasks_lt: BigInt
  submittedTasks_gte: BigInt
  submittedTasks_lte: BigInt
  submittedTasks_in: [BigInt!]
  submittedTasks_not_in: [BigInt!]
  closedTasks: BigInt
  closedTasks_not: BigInt
  closedTasks_gt: BigInt
  closedTasks_lt: BigInt
  closedTasks_gte: BigInt
  closedTasks_lte: BigInt
  closedTasks_in: [BigInt!]
  closedTasks_not_in: [BigInt!]
  archivedTasks: BigInt
  archivedTasks_not: BigInt
  archivedTasks_gt: BigInt
  archivedTasks_lt: BigInt
  archivedTasks_gte: BigInt
  archivedTasks_lte: BigInt
  archivedTasks_in: [BigInt!]
  archivedTasks_not_in: [BigInt!]
  tokens_: UserToken_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UserStat_filter]
  or: [UserStat_filter]
}

enum UserStat_orderBy {
  id
  proposedTasks
  openedTasks
  assignedTasks
  submittedTasks
  closedTasks
  archivedTasks
  tokens
}

type UserToken {
  id: ID!
  user: UserStat!
  token: BigInt!
  count: BigInt!
}

input UserToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: UserStat_filter
  token: BigInt
  token_not: BigInt
  token_gt: BigInt
  token_lt: BigInt
  token_gte: BigInt
  token_lte: BigInt
  token_in: [BigInt!]
  token_not_in: [BigInt!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UserToken_filter]
  or: [UserToken_filter]
}

enum UserToken_orderBy {
  id
  user
  user__id
  user__proposedTasks
  user__openedTasks
  user__assignedTasks
  user__submittedTasks
  user__closedTasks
  user__archivedTasks
  token
  count
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}