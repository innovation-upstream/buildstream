schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Action {
  id: ID!
  actionId: BigInt!
  orgId: BigInt!
  initiator: String!
  targetAddress: String
  value: BigInt
  data: Bytes
  executed: Boolean!
  tokenAddress: String
  actionType: Int!
  approvedBy: [String!]
}

input Action_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  actionId: BigInt
  actionId_not: BigInt
  actionId_gt: BigInt
  actionId_lt: BigInt
  actionId_gte: BigInt
  actionId_lte: BigInt
  actionId_in: [BigInt!]
  actionId_not_in: [BigInt!]
  orgId: BigInt
  orgId_not: BigInt
  orgId_gt: BigInt
  orgId_lt: BigInt
  orgId_gte: BigInt
  orgId_lte: BigInt
  orgId_in: [BigInt!]
  orgId_not_in: [BigInt!]
  initiator: String
  initiator_not: String
  initiator_gt: String
  initiator_lt: String
  initiator_gte: String
  initiator_lte: String
  initiator_in: [String!]
  initiator_not_in: [String!]
  initiator_contains: String
  initiator_contains_nocase: String
  initiator_not_contains: String
  initiator_not_contains_nocase: String
  initiator_starts_with: String
  initiator_starts_with_nocase: String
  initiator_not_starts_with: String
  initiator_not_starts_with_nocase: String
  initiator_ends_with: String
  initiator_ends_with_nocase: String
  initiator_not_ends_with: String
  initiator_not_ends_with_nocase: String
  targetAddress: String
  targetAddress_not: String
  targetAddress_gt: String
  targetAddress_lt: String
  targetAddress_gte: String
  targetAddress_lte: String
  targetAddress_in: [String!]
  targetAddress_not_in: [String!]
  targetAddress_contains: String
  targetAddress_contains_nocase: String
  targetAddress_not_contains: String
  targetAddress_not_contains_nocase: String
  targetAddress_starts_with: String
  targetAddress_starts_with_nocase: String
  targetAddress_not_starts_with: String
  targetAddress_not_starts_with_nocase: String
  targetAddress_ends_with: String
  targetAddress_ends_with_nocase: String
  targetAddress_not_ends_with: String
  targetAddress_not_ends_with_nocase: String
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
  data: Bytes
  data_not: Bytes
  data_in: [Bytes!]
  data_not_in: [Bytes!]
  data_contains: Bytes
  data_not_contains: Bytes
  executed: Boolean
  executed_not: Boolean
  executed_in: [Boolean!]
  executed_not_in: [Boolean!]
  tokenAddress: String
  tokenAddress_not: String
  tokenAddress_gt: String
  tokenAddress_lt: String
  tokenAddress_gte: String
  tokenAddress_lte: String
  tokenAddress_in: [String!]
  tokenAddress_not_in: [String!]
  tokenAddress_contains: String
  tokenAddress_contains_nocase: String
  tokenAddress_not_contains: String
  tokenAddress_not_contains_nocase: String
  tokenAddress_starts_with: String
  tokenAddress_starts_with_nocase: String
  tokenAddress_not_starts_with: String
  tokenAddress_not_starts_with_nocase: String
  tokenAddress_ends_with: String
  tokenAddress_ends_with_nocase: String
  tokenAddress_not_ends_with: String
  tokenAddress_not_ends_with_nocase: String
  actionType: Int
  actionType_not: Int
  actionType_gt: Int
  actionType_lt: Int
  actionType_gte: Int
  actionType_lte: Int
  actionType_in: [Int!]
  actionType_not_in: [Int!]
  approvedBy: [String!]
  approvedBy_not: [String!]
  approvedBy_contains: [String!]
  approvedBy_contains_nocase: [String!]
  approvedBy_not_contains: [String!]
  approvedBy_not_contains_nocase: [String!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Action_orderBy {
  id
  actionId
  orgId
  initiator
  targetAddress
  value
  data
  executed
  tokenAddress
  actionType
  approvedBy
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Organization {
  id: ID!
  orgId: BigInt!
  name: String!
  description: String!
  approvers: [String!]!
  signers: [String!]!
  requiredTaskApprovals: BigInt!
  requiredConfirmations: BigInt!
  rewardMultiplier: BigInt!
  rewardSlashMultiplier: BigInt!
  slashRewardEvery: BigInt!
  rewardToken: Bytes!
  isInitialized: Boolean!
  treasury: Treasury!
}

input Organization_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  orgId: BigInt
  orgId_not: BigInt
  orgId_gt: BigInt
  orgId_lt: BigInt
  orgId_gte: BigInt
  orgId_lte: BigInt
  orgId_in: [BigInt!]
  orgId_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  approvers: [String!]
  approvers_not: [String!]
  approvers_contains: [String!]
  approvers_contains_nocase: [String!]
  approvers_not_contains: [String!]
  approvers_not_contains_nocase: [String!]
  signers: [String!]
  signers_not: [String!]
  signers_contains: [String!]
  signers_contains_nocase: [String!]
  signers_not_contains: [String!]
  signers_not_contains_nocase: [String!]
  requiredTaskApprovals: BigInt
  requiredTaskApprovals_not: BigInt
  requiredTaskApprovals_gt: BigInt
  requiredTaskApprovals_lt: BigInt
  requiredTaskApprovals_gte: BigInt
  requiredTaskApprovals_lte: BigInt
  requiredTaskApprovals_in: [BigInt!]
  requiredTaskApprovals_not_in: [BigInt!]
  requiredConfirmations: BigInt
  requiredConfirmations_not: BigInt
  requiredConfirmations_gt: BigInt
  requiredConfirmations_lt: BigInt
  requiredConfirmations_gte: BigInt
  requiredConfirmations_lte: BigInt
  requiredConfirmations_in: [BigInt!]
  requiredConfirmations_not_in: [BigInt!]
  rewardMultiplier: BigInt
  rewardMultiplier_not: BigInt
  rewardMultiplier_gt: BigInt
  rewardMultiplier_lt: BigInt
  rewardMultiplier_gte: BigInt
  rewardMultiplier_lte: BigInt
  rewardMultiplier_in: [BigInt!]
  rewardMultiplier_not_in: [BigInt!]
  rewardSlashMultiplier: BigInt
  rewardSlashMultiplier_not: BigInt
  rewardSlashMultiplier_gt: BigInt
  rewardSlashMultiplier_lt: BigInt
  rewardSlashMultiplier_gte: BigInt
  rewardSlashMultiplier_lte: BigInt
  rewardSlashMultiplier_in: [BigInt!]
  rewardSlashMultiplier_not_in: [BigInt!]
  slashRewardEvery: BigInt
  slashRewardEvery_not: BigInt
  slashRewardEvery_gt: BigInt
  slashRewardEvery_lt: BigInt
  slashRewardEvery_gte: BigInt
  slashRewardEvery_lte: BigInt
  slashRewardEvery_in: [BigInt!]
  slashRewardEvery_not_in: [BigInt!]
  rewardToken: Bytes
  rewardToken_not: Bytes
  rewardToken_in: [Bytes!]
  rewardToken_not_in: [Bytes!]
  rewardToken_contains: Bytes
  rewardToken_not_contains: Bytes
  isInitialized: Boolean
  isInitialized_not: Boolean
  isInitialized_in: [Boolean!]
  isInitialized_not_in: [Boolean!]
  treasury: String
  treasury_not: String
  treasury_gt: String
  treasury_lt: String
  treasury_gte: String
  treasury_lte: String
  treasury_in: [String!]
  treasury_not_in: [String!]
  treasury_contains: String
  treasury_contains_nocase: String
  treasury_not_contains: String
  treasury_not_contains_nocase: String
  treasury_starts_with: String
  treasury_starts_with_nocase: String
  treasury_not_starts_with: String
  treasury_not_starts_with_nocase: String
  treasury_ends_with: String
  treasury_ends_with_nocase: String
  treasury_not_ends_with: String
  treasury_not_ends_with_nocase: String
  treasury_: Treasury_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Organization_orderBy {
  id
  orgId
  name
  description
  approvers
  signers
  requiredTaskApprovals
  requiredConfirmations
  rewardMultiplier
  rewardSlashMultiplier
  slashRewardEvery
  rewardToken
  isInitialized
  treasury
}

type Query {
  organization(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Organization
  organizations(
    skip: Int = 0
    first: Int = 100
    orderBy: Organization_orderBy
    orderDirection: OrderDirection
    where: Organization_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Organization!]!
  task(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Task
  tasks(
    skip: Int = 0
    first: Int = 100
    orderBy: Task_orderBy
    orderDirection: OrderDirection
    where: Task_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Task!]!
  taskSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskSnapshot
  taskSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TaskSnapshot_orderBy
    orderDirection: OrderDirection
    where: TaskSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TaskSnapshot!]!
  taskCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskCount
  taskCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: TaskCount_orderBy
    orderDirection: OrderDirection
    where: TaskCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TaskCount!]!
  treasuryToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TreasuryToken
  treasuryTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: TreasuryToken_orderBy
    orderDirection: OrderDirection
    where: TreasuryToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TreasuryToken!]!
  treasury(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Treasury
  treasuries(
    skip: Int = 0
    first: Int = 100
    orderBy: Treasury_orderBy
    orderDirection: OrderDirection
    where: Treasury_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Treasury!]!
  action(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Action
  actions(
    skip: Int = 0
    first: Int = 100
    orderBy: Action_orderBy
    orderDirection: OrderDirection
    where: Action_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Action!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  organization(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Organization
  organizations(
    skip: Int = 0
    first: Int = 100
    orderBy: Organization_orderBy
    orderDirection: OrderDirection
    where: Organization_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Organization!]!
  task(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Task
  tasks(
    skip: Int = 0
    first: Int = 100
    orderBy: Task_orderBy
    orderDirection: OrderDirection
    where: Task_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Task!]!
  taskSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskSnapshot
  taskSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TaskSnapshot_orderBy
    orderDirection: OrderDirection
    where: TaskSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TaskSnapshot!]!
  taskCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskCount
  taskCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: TaskCount_orderBy
    orderDirection: OrderDirection
    where: TaskCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TaskCount!]!
  treasuryToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TreasuryToken
  treasuryTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: TreasuryToken_orderBy
    orderDirection: OrderDirection
    where: TreasuryToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TreasuryToken!]!
  treasury(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Treasury
  treasuries(
    skip: Int = 0
    first: Int = 100
    orderBy: Treasury_orderBy
    orderDirection: OrderDirection
    where: Treasury_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Treasury!]!
  action(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Action
  actions(
    skip: Int = 0
    first: Int = 100
    orderBy: Action_orderBy
    orderDirection: OrderDirection
    where: Action_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Action!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Task {
  id: ID!
  taskId: BigInt!
  orgId: Organization!
  title: String
  description: String
  assigner: String!
  assignee: String
  taskTags: [String!]!
  status: Int!
  complexityScore: BigInt!
  reputationLevel: BigInt!
  requiredApprovals: BigInt!
  rewardAmount: BigInt
  rewardToken: Bytes
  assignDate: BigInt
  submitDate: BigInt
  taskDuration: BigInt!
  comment: String
  approvedBy: [String!]
  assignmentRequest: [String!]
}

type TaskCount {
  id: ID!
  orgId: BigInt!
  count: BigInt!
}

input TaskCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  orgId: BigInt
  orgId_not: BigInt
  orgId_gt: BigInt
  orgId_lt: BigInt
  orgId_gte: BigInt
  orgId_lte: BigInt
  orgId_in: [BigInt!]
  orgId_not_in: [BigInt!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum TaskCount_orderBy {
  id
  orgId
  count
}

type TaskSnapshot {
  id: ID!
  actor: String!
  block: BigInt!
  timestamp: BigInt!
  taskId: BigInt!
  orgId: Organization!
  title: String
  description: String
  assigner: String
  assignee: String
  taskTags: [String!]!
  status: Int!
  complexityScore: BigInt
  reputationLevel: BigInt
  requiredApprovals: BigInt
  rewardAmount: BigInt
  rewardToken: Bytes
  assignDate: BigInt
  submitDate: BigInt
  taskDuration: BigInt
  comment: String
  approvedBy: [String!]
  assignmentRequest: [String!]
}

input TaskSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  actor: String
  actor_not: String
  actor_gt: String
  actor_lt: String
  actor_gte: String
  actor_lte: String
  actor_in: [String!]
  actor_not_in: [String!]
  actor_contains: String
  actor_contains_nocase: String
  actor_not_contains: String
  actor_not_contains_nocase: String
  actor_starts_with: String
  actor_starts_with_nocase: String
  actor_not_starts_with: String
  actor_not_starts_with_nocase: String
  actor_ends_with: String
  actor_ends_with_nocase: String
  actor_not_ends_with: String
  actor_not_ends_with_nocase: String
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  taskId: BigInt
  taskId_not: BigInt
  taskId_gt: BigInt
  taskId_lt: BigInt
  taskId_gte: BigInt
  taskId_lte: BigInt
  taskId_in: [BigInt!]
  taskId_not_in: [BigInt!]
  orgId: String
  orgId_not: String
  orgId_gt: String
  orgId_lt: String
  orgId_gte: String
  orgId_lte: String
  orgId_in: [String!]
  orgId_not_in: [String!]
  orgId_contains: String
  orgId_contains_nocase: String
  orgId_not_contains: String
  orgId_not_contains_nocase: String
  orgId_starts_with: String
  orgId_starts_with_nocase: String
  orgId_not_starts_with: String
  orgId_not_starts_with_nocase: String
  orgId_ends_with: String
  orgId_ends_with_nocase: String
  orgId_not_ends_with: String
  orgId_not_ends_with_nocase: String
  orgId_: Organization_filter
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  assigner: String
  assigner_not: String
  assigner_gt: String
  assigner_lt: String
  assigner_gte: String
  assigner_lte: String
  assigner_in: [String!]
  assigner_not_in: [String!]
  assigner_contains: String
  assigner_contains_nocase: String
  assigner_not_contains: String
  assigner_not_contains_nocase: String
  assigner_starts_with: String
  assigner_starts_with_nocase: String
  assigner_not_starts_with: String
  assigner_not_starts_with_nocase: String
  assigner_ends_with: String
  assigner_ends_with_nocase: String
  assigner_not_ends_with: String
  assigner_not_ends_with_nocase: String
  assignee: String
  assignee_not: String
  assignee_gt: String
  assignee_lt: String
  assignee_gte: String
  assignee_lte: String
  assignee_in: [String!]
  assignee_not_in: [String!]
  assignee_contains: String
  assignee_contains_nocase: String
  assignee_not_contains: String
  assignee_not_contains_nocase: String
  assignee_starts_with: String
  assignee_starts_with_nocase: String
  assignee_not_starts_with: String
  assignee_not_starts_with_nocase: String
  assignee_ends_with: String
  assignee_ends_with_nocase: String
  assignee_not_ends_with: String
  assignee_not_ends_with_nocase: String
  taskTags: [String!]
  taskTags_not: [String!]
  taskTags_contains: [String!]
  taskTags_contains_nocase: [String!]
  taskTags_not_contains: [String!]
  taskTags_not_contains_nocase: [String!]
  status: Int
  status_not: Int
  status_gt: Int
  status_lt: Int
  status_gte: Int
  status_lte: Int
  status_in: [Int!]
  status_not_in: [Int!]
  complexityScore: BigInt
  complexityScore_not: BigInt
  complexityScore_gt: BigInt
  complexityScore_lt: BigInt
  complexityScore_gte: BigInt
  complexityScore_lte: BigInt
  complexityScore_in: [BigInt!]
  complexityScore_not_in: [BigInt!]
  reputationLevel: BigInt
  reputationLevel_not: BigInt
  reputationLevel_gt: BigInt
  reputationLevel_lt: BigInt
  reputationLevel_gte: BigInt
  reputationLevel_lte: BigInt
  reputationLevel_in: [BigInt!]
  reputationLevel_not_in: [BigInt!]
  requiredApprovals: BigInt
  requiredApprovals_not: BigInt
  requiredApprovals_gt: BigInt
  requiredApprovals_lt: BigInt
  requiredApprovals_gte: BigInt
  requiredApprovals_lte: BigInt
  requiredApprovals_in: [BigInt!]
  requiredApprovals_not_in: [BigInt!]
  rewardAmount: BigInt
  rewardAmount_not: BigInt
  rewardAmount_gt: BigInt
  rewardAmount_lt: BigInt
  rewardAmount_gte: BigInt
  rewardAmount_lte: BigInt
  rewardAmount_in: [BigInt!]
  rewardAmount_not_in: [BigInt!]
  rewardToken: Bytes
  rewardToken_not: Bytes
  rewardToken_in: [Bytes!]
  rewardToken_not_in: [Bytes!]
  rewardToken_contains: Bytes
  rewardToken_not_contains: Bytes
  assignDate: BigInt
  assignDate_not: BigInt
  assignDate_gt: BigInt
  assignDate_lt: BigInt
  assignDate_gte: BigInt
  assignDate_lte: BigInt
  assignDate_in: [BigInt!]
  assignDate_not_in: [BigInt!]
  submitDate: BigInt
  submitDate_not: BigInt
  submitDate_gt: BigInt
  submitDate_lt: BigInt
  submitDate_gte: BigInt
  submitDate_lte: BigInt
  submitDate_in: [BigInt!]
  submitDate_not_in: [BigInt!]
  taskDuration: BigInt
  taskDuration_not: BigInt
  taskDuration_gt: BigInt
  taskDuration_lt: BigInt
  taskDuration_gte: BigInt
  taskDuration_lte: BigInt
  taskDuration_in: [BigInt!]
  taskDuration_not_in: [BigInt!]
  comment: String
  comment_not: String
  comment_gt: String
  comment_lt: String
  comment_gte: String
  comment_lte: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_contains: String
  comment_contains_nocase: String
  comment_not_contains: String
  comment_not_contains_nocase: String
  comment_starts_with: String
  comment_starts_with_nocase: String
  comment_not_starts_with: String
  comment_not_starts_with_nocase: String
  comment_ends_with: String
  comment_ends_with_nocase: String
  comment_not_ends_with: String
  comment_not_ends_with_nocase: String
  approvedBy: [String!]
  approvedBy_not: [String!]
  approvedBy_contains: [String!]
  approvedBy_contains_nocase: [String!]
  approvedBy_not_contains: [String!]
  approvedBy_not_contains_nocase: [String!]
  assignmentRequest: [String!]
  assignmentRequest_not: [String!]
  assignmentRequest_contains: [String!]
  assignmentRequest_contains_nocase: [String!]
  assignmentRequest_not_contains: [String!]
  assignmentRequest_not_contains_nocase: [String!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum TaskSnapshot_orderBy {
  id
  actor
  block
  timestamp
  taskId
  orgId
  title
  description
  assigner
  assignee
  taskTags
  status
  complexityScore
  reputationLevel
  requiredApprovals
  rewardAmount
  rewardToken
  assignDate
  submitDate
  taskDuration
  comment
  approvedBy
  assignmentRequest
}

input Task_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  taskId: BigInt
  taskId_not: BigInt
  taskId_gt: BigInt
  taskId_lt: BigInt
  taskId_gte: BigInt
  taskId_lte: BigInt
  taskId_in: [BigInt!]
  taskId_not_in: [BigInt!]
  orgId: String
  orgId_not: String
  orgId_gt: String
  orgId_lt: String
  orgId_gte: String
  orgId_lte: String
  orgId_in: [String!]
  orgId_not_in: [String!]
  orgId_contains: String
  orgId_contains_nocase: String
  orgId_not_contains: String
  orgId_not_contains_nocase: String
  orgId_starts_with: String
  orgId_starts_with_nocase: String
  orgId_not_starts_with: String
  orgId_not_starts_with_nocase: String
  orgId_ends_with: String
  orgId_ends_with_nocase: String
  orgId_not_ends_with: String
  orgId_not_ends_with_nocase: String
  orgId_: Organization_filter
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  assigner: String
  assigner_not: String
  assigner_gt: String
  assigner_lt: String
  assigner_gte: String
  assigner_lte: String
  assigner_in: [String!]
  assigner_not_in: [String!]
  assigner_contains: String
  assigner_contains_nocase: String
  assigner_not_contains: String
  assigner_not_contains_nocase: String
  assigner_starts_with: String
  assigner_starts_with_nocase: String
  assigner_not_starts_with: String
  assigner_not_starts_with_nocase: String
  assigner_ends_with: String
  assigner_ends_with_nocase: String
  assigner_not_ends_with: String
  assigner_not_ends_with_nocase: String
  assignee: String
  assignee_not: String
  assignee_gt: String
  assignee_lt: String
  assignee_gte: String
  assignee_lte: String
  assignee_in: [String!]
  assignee_not_in: [String!]
  assignee_contains: String
  assignee_contains_nocase: String
  assignee_not_contains: String
  assignee_not_contains_nocase: String
  assignee_starts_with: String
  assignee_starts_with_nocase: String
  assignee_not_starts_with: String
  assignee_not_starts_with_nocase: String
  assignee_ends_with: String
  assignee_ends_with_nocase: String
  assignee_not_ends_with: String
  assignee_not_ends_with_nocase: String
  taskTags: [String!]
  taskTags_not: [String!]
  taskTags_contains: [String!]
  taskTags_contains_nocase: [String!]
  taskTags_not_contains: [String!]
  taskTags_not_contains_nocase: [String!]
  status: Int
  status_not: Int
  status_gt: Int
  status_lt: Int
  status_gte: Int
  status_lte: Int
  status_in: [Int!]
  status_not_in: [Int!]
  complexityScore: BigInt
  complexityScore_not: BigInt
  complexityScore_gt: BigInt
  complexityScore_lt: BigInt
  complexityScore_gte: BigInt
  complexityScore_lte: BigInt
  complexityScore_in: [BigInt!]
  complexityScore_not_in: [BigInt!]
  reputationLevel: BigInt
  reputationLevel_not: BigInt
  reputationLevel_gt: BigInt
  reputationLevel_lt: BigInt
  reputationLevel_gte: BigInt
  reputationLevel_lte: BigInt
  reputationLevel_in: [BigInt!]
  reputationLevel_not_in: [BigInt!]
  requiredApprovals: BigInt
  requiredApprovals_not: BigInt
  requiredApprovals_gt: BigInt
  requiredApprovals_lt: BigInt
  requiredApprovals_gte: BigInt
  requiredApprovals_lte: BigInt
  requiredApprovals_in: [BigInt!]
  requiredApprovals_not_in: [BigInt!]
  rewardAmount: BigInt
  rewardAmount_not: BigInt
  rewardAmount_gt: BigInt
  rewardAmount_lt: BigInt
  rewardAmount_gte: BigInt
  rewardAmount_lte: BigInt
  rewardAmount_in: [BigInt!]
  rewardAmount_not_in: [BigInt!]
  rewardToken: Bytes
  rewardToken_not: Bytes
  rewardToken_in: [Bytes!]
  rewardToken_not_in: [Bytes!]
  rewardToken_contains: Bytes
  rewardToken_not_contains: Bytes
  assignDate: BigInt
  assignDate_not: BigInt
  assignDate_gt: BigInt
  assignDate_lt: BigInt
  assignDate_gte: BigInt
  assignDate_lte: BigInt
  assignDate_in: [BigInt!]
  assignDate_not_in: [BigInt!]
  submitDate: BigInt
  submitDate_not: BigInt
  submitDate_gt: BigInt
  submitDate_lt: BigInt
  submitDate_gte: BigInt
  submitDate_lte: BigInt
  submitDate_in: [BigInt!]
  submitDate_not_in: [BigInt!]
  taskDuration: BigInt
  taskDuration_not: BigInt
  taskDuration_gt: BigInt
  taskDuration_lt: BigInt
  taskDuration_gte: BigInt
  taskDuration_lte: BigInt
  taskDuration_in: [BigInt!]
  taskDuration_not_in: [BigInt!]
  comment: String
  comment_not: String
  comment_gt: String
  comment_lt: String
  comment_gte: String
  comment_lte: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_contains: String
  comment_contains_nocase: String
  comment_not_contains: String
  comment_not_contains_nocase: String
  comment_starts_with: String
  comment_starts_with_nocase: String
  comment_not_starts_with: String
  comment_not_starts_with_nocase: String
  comment_ends_with: String
  comment_ends_with_nocase: String
  comment_not_ends_with: String
  comment_not_ends_with_nocase: String
  approvedBy: [String!]
  approvedBy_not: [String!]
  approvedBy_contains: [String!]
  approvedBy_contains_nocase: [String!]
  approvedBy_not_contains: [String!]
  approvedBy_not_contains_nocase: [String!]
  assignmentRequest: [String!]
  assignmentRequest_not: [String!]
  assignmentRequest_contains: [String!]
  assignmentRequest_contains_nocase: [String!]
  assignmentRequest_not_contains: [String!]
  assignmentRequest_not_contains_nocase: [String!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Task_orderBy {
  id
  taskId
  orgId
  title
  description
  assigner
  assignee
  taskTags
  status
  complexityScore
  reputationLevel
  requiredApprovals
  rewardAmount
  rewardToken
  assignDate
  submitDate
  taskDuration
  comment
  approvedBy
  assignmentRequest
}

type Treasury {
  id: ID!
  orgId: BigInt!
  tokens(skip: Int = 0, first: Int = 100, orderBy: TreasuryToken_orderBy, orderDirection: OrderDirection, where: TreasuryToken_filter): [TreasuryToken!]
}

type TreasuryToken {
  id: ID!
  orgId: Treasury
  token: String!
  balance: BigInt!
  lockedBalance: BigInt!
}

input TreasuryToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  orgId: String
  orgId_not: String
  orgId_gt: String
  orgId_lt: String
  orgId_gte: String
  orgId_lte: String
  orgId_in: [String!]
  orgId_not_in: [String!]
  orgId_contains: String
  orgId_contains_nocase: String
  orgId_not_contains: String
  orgId_not_contains_nocase: String
  orgId_starts_with: String
  orgId_starts_with_nocase: String
  orgId_not_starts_with: String
  orgId_not_starts_with_nocase: String
  orgId_ends_with: String
  orgId_ends_with_nocase: String
  orgId_not_ends_with: String
  orgId_not_ends_with_nocase: String
  orgId_: Treasury_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  lockedBalance: BigInt
  lockedBalance_not: BigInt
  lockedBalance_gt: BigInt
  lockedBalance_lt: BigInt
  lockedBalance_gte: BigInt
  lockedBalance_lte: BigInt
  lockedBalance_in: [BigInt!]
  lockedBalance_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum TreasuryToken_orderBy {
  id
  orgId
  token
  balance
  lockedBalance
}

input Treasury_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  orgId: BigInt
  orgId_not: BigInt
  orgId_gt: BigInt
  orgId_lt: BigInt
  orgId_gte: BigInt
  orgId_lte: BigInt
  orgId_in: [BigInt!]
  orgId_not_in: [BigInt!]
  tokens_: TreasuryToken_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Treasury_orderBy {
  id
  orgId
  tokens
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}