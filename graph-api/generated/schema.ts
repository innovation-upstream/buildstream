// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class UserRoles extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserRoles entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserRoles must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserRoles", id.toString(), this);
    }
  }

  static load(id: string): UserRoles | null {
    return changetype<UserRoles | null>(store.get("UserRoles", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get approver(): Array<string> {
    let value = this.get("approver");
    return value!.toStringArray();
  }

  set approver(value: Array<string>) {
    this.set("approver", Value.fromStringArray(value));
  }

  get signer(): Array<string> {
    let value = this.get("signer");
    return value!.toStringArray();
  }

  set signer(value: Array<string>) {
    this.set("signer", Value.fromStringArray(value));
  }

  get reviewer(): Array<string> {
    let value = this.get("reviewer");
    return value!.toStringArray();
  }

  set reviewer(value: Array<string>) {
    this.set("reviewer", Value.fromStringArray(value));
  }
}

export class UserOrganizations extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserOrganizations entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserOrganizations must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserOrganizations", id.toString(), this);
    }
  }

  static load(id: string): UserOrganizations | null {
    return changetype<UserOrganizations | null>(
      store.get("UserOrganizations", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get roles(): string {
    let value = this.get("roles");
    return value!.toString();
  }

  set roles(value: string) {
    this.set("roles", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get organizations(): string {
    let value = this.get("organizations");
    return value!.toString();
  }

  set organizations(value: string) {
    this.set("organizations", Value.fromString(value));
  }
}

export class Organization extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Organization entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Organization must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Organization", id.toString(), this);
    }
  }

  static load(id: string): Organization | null {
    return changetype<Organization | null>(store.get("Organization", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get orgId(): BigInt | null {
    let value = this.get("orgId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set orgId(value: BigInt | null) {
    if (!value) {
      this.unset("orgId");
    } else {
      this.set("orgId", Value.fromBigInt(<BigInt>value));
    }
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get reviewers(): Array<string> {
    let value = this.get("reviewers");
    return value!.toStringArray();
  }

  set reviewers(value: Array<string>) {
    this.set("reviewers", Value.fromStringArray(value));
  }

  get approvers(): Array<string> {
    let value = this.get("approvers");
    return value!.toStringArray();
  }

  set approvers(value: Array<string>) {
    this.set("approvers", Value.fromStringArray(value));
  }

  get signers(): Array<string> {
    let value = this.get("signers");
    return value!.toStringArray();
  }

  set signers(value: Array<string>) {
    this.set("signers", Value.fromStringArray(value));
  }

  get requiredTaskApprovals(): BigInt {
    let value = this.get("requiredTaskApprovals");
    return value!.toBigInt();
  }

  set requiredTaskApprovals(value: BigInt) {
    this.set("requiredTaskApprovals", Value.fromBigInt(value));
  }

  get requiredConfirmations(): BigInt {
    let value = this.get("requiredConfirmations");
    return value!.toBigInt();
  }

  set requiredConfirmations(value: BigInt) {
    this.set("requiredConfirmations", Value.fromBigInt(value));
  }

  get rewardMultiplier(): BigInt {
    let value = this.get("rewardMultiplier");
    return value!.toBigInt();
  }

  set rewardMultiplier(value: BigInt) {
    this.set("rewardMultiplier", Value.fromBigInt(value));
  }

  get rewardToken(): Bytes {
    let value = this.get("rewardToken");
    return value!.toBytes();
  }

  set rewardToken(value: Bytes) {
    this.set("rewardToken", Value.fromBytes(value));
  }
}
