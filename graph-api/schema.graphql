type UserStat @entity {
  id: ID!
  proposedTasks: BigInt!
  openedTasks: BigInt!
  assignedTasks: BigInt!
  submittedTasks: BigInt!
  closedTasks: BigInt!
  archivedTasks: BigInt!
  tokens: [UserToken!] @derivedFrom(field: "user")
}

type UserToken @entity {
  id: ID!
  user: UserStat!
  token: BigInt!
  count: BigInt!
}

type OrganizationStat @entity {
  id: ID!
  proposedTasks: BigInt!
  openedTasks: BigInt!
  assignedTasks: BigInt!
  submittedTasks: BigInt!
  closedTasks: BigInt!
  archivedTasks: BigInt!
  tags: [BigInt!]
}

type Organization @entity {
  id: ID!
  orgId: BigInt!
  name: String!
  description: String!
  approvers: [String!]!
  signers: [String!]!
  members: [String!]
  requiredTaskApprovals: BigInt!
  requiredConfirmations: BigInt!
  rewardMultiplier: BigInt!
  rewardSlashMultiplier: BigInt!
  slashRewardEvery: BigInt!
  rewardToken: Bytes!
  isInitialized: Boolean!
  treasury: Treasury!
  stat: OrganizationStat
  isArchived: Boolean!
}

type OrganizationSnapshot @entity {
  id: ID!
  orgId: BigInt!
  name: String!
  description: String!
  approvers: [String!]!
  signers: [String!]!
  requiredTaskApprovals: BigInt!
  requiredConfirmations: BigInt!
  rewardMultiplier: BigInt!
  rewardSlashMultiplier: BigInt!
  slashRewardEvery: BigInt!
  rewardToken: Bytes!
  isInitialized: Boolean!
  treasury: Treasury!
  stat: OrganizationStat
  isArchived: Boolean!
}

type Task @entity {
  id: ID!
  taskId: BigInt!
  externalId: String
  orgId: Organization!
  title: String
  description: String
  assigner: String
  assignee: String
  teamAssignee: String
  team: Team
  taskTags: [BigInt!]!
  status: Int!
  complexityScore: BigInt!
  reputationLevel: BigInt!
  requiredApprovals: BigInt!
  rewardAmount: BigInt
  rewardToken: Bytes
  assignDate: BigInt
  submitDate: BigInt
  dueDate: BigInt!
  comment: String
  approvedBy: [String!]
  assignmentRequest: [String!]
  staked: Boolean!
  revisions: [TaskRevision!] @derivedFrom(field: "task")
  raw: String!
  disableSelfAssign: Boolean!
}

type TaskRevision @entity {
  id: ID!
  task: Task!
  taskSnapshot: TaskSnapshot!
  revisionId: BigInt!
  requester: String!
  externalRevisionId: Bytes!
  revisionHash: Bytes!
  dueDateExtension: BigInt!
  dueDateExtensionRequest: BigInt!
  status: Int!
}

type TaskSnapshot @entity {
  id: ID!
  actor: String!
  block: BigInt!
  timestamp: BigInt!
  taskId: BigInt!
  orgId: Organization!
  title: String
  description: String
  assigner: String
  assignee: String
  teamAssignee: String
  team: Team
  taskTags: [BigInt!]!
  status: Int!
  complexityScore: BigInt
  reputationLevel: BigInt
  requiredApprovals: BigInt
  rewardAmount: BigInt
  rewardToken: Bytes
  assignDate: BigInt
  submitDate: BigInt
  dueDate: BigInt
  comment: String
  approvedBy: [String!]
  assignmentRequest: [String!]
  staked: Boolean!
  disableSelfAssign: Boolean!
}

type TreasuryToken @entity {
  id: ID!
  orgId: Treasury
  token: String!
  balance: BigInt!
  lockedBalance: BigInt!
}

type Treasury @entity {
  id: ID!
  orgId: BigInt!
  tokens: [TreasuryToken!] @derivedFrom(field: "orgId")
}

type Deposit @entity {
  id: ID!
  orgId: BigInt!
  token: String!
  amount: BigInt!
  initiator: String!
  completedAt: BigInt!
}

type Action @entity {
  id: ID!
  actionId: BigInt!
  orgId: BigInt!
  organizationSnapshot: OrganizationSnapshot!
  initiator: String!
  targetAddress: String
  value: BigInt
  data: Bytes
  executed: Boolean!
  tokenAddress: String
  actionType: Int!
  approvedBy: [String!]
  initiatedAt: BigInt!
  completedAt: BigInt
  oldValue: Bytes
  updateCount: BigInt!
}

type ActionSnapshot @entity {
  id: ID!
  actionId: BigInt!
  orgId: BigInt!
  organizationSnapshot: OrganizationSnapshot!
  initiator: String!
  targetAddress: String
  value: BigInt
  data: Bytes
  executed: Boolean!
  tokenAddress: String
  actionType: Int!
  approvedBy: [String!]
  initiatedAt: BigInt!
  completedAt: BigInt
  actor: String!
  block: BigInt!
  timestamp: BigInt!
  updateCount: BigInt!
}

type Team @entity {
  id: ID!
  teamId: BigInt!
  name: String!
  description: String!
  walletAddress: String!
  archived: Boolean!
  members: [String!]!
  teamRewardMultiplier: BigInt!
}

type Notification @entity {
  id: ID!
  tags: [String!]!
  users: [String!]
  orgId: Organization!
  task: Task
  action: Action
  deposit: Deposit
  taskSnapshot: TaskSnapshot
  actionSnapshot: ActionSnapshot
  timestamp: BigInt!
}
